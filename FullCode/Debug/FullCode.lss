
FullCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b80  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  00000b80  00000c14  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080012e  0080012e  00000ce2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ce2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000d14  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00000d50  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000019e7  00000000  00000000  00000e38  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000786  00000000  00000000  0000281f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c30  00000000  00000000  00002fa5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000224  00000000  00000000  00003bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004f8  00000000  00000000  00003dfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000011e9  00000000  00000000  000042f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000054dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	11 e0       	ldi	r17, 0x01	; 1
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e8       	ldi	r30, 0x80	; 128
  68:	fb e0       	ldi	r31, 0x0B	; 11
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	ae 32       	cpi	r26, 0x2E	; 46
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	21 e0       	ldi	r18, 0x01	; 1
  78:	ae e2       	ldi	r26, 0x2E	; 46
  7a:	b1 e0       	ldi	r27, 0x01	; 1
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a0 33       	cpi	r26, 0x30	; 48
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 8f 03 	call	0x71e	; 0x71e <main>
  8a:	0c 94 be 05 	jmp	0xb7c	; 0xb7c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
		hx711L&=~(1<<15);
	}
	hx711H=hx711H>>1;
	
	return (hx711H*(65536/18029.6))+hx711L/18029.6; //load cell calibration
  92:	98 b3       	in	r25, 0x18	; 24
  94:	9f 70       	andi	r25, 0x0F	; 15
  96:	28 2f       	mov	r18, r24
  98:	20 7f       	andi	r18, 0xF0	; 240
  9a:	92 2b       	or	r25, r18
  9c:	98 bb       	out	0x18, r25	; 24
  9e:	98 b3       	in	r25, 0x18	; 24
  a0:	9e 7f       	andi	r25, 0xFE	; 254
  a2:	98 bb       	out	0x18, r25	; 24
  a4:	98 b3       	in	r25, 0x18	; 24
  a6:	92 60       	ori	r25, 0x02	; 2
  a8:	98 bb       	out	0x18, r25	; 24
  aa:	32 e0       	ldi	r19, 0x02	; 2
  ac:	3a 95       	dec	r19
  ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Command+0x1a>
  b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_Command+0x20>
  b2:	98 b3       	in	r25, 0x18	; 24
  b4:	9d 7f       	andi	r25, 0xFD	; 253
  b6:	98 bb       	out	0x18, r25	; 24
  b8:	ef e8       	ldi	r30, 0x8F	; 143
  ba:	f1 e0       	ldi	r31, 0x01	; 1
  bc:	31 97       	sbiw	r30, 0x01	; 1
  be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x2a>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_Command+0x30>
  c2:	00 00       	nop
  c4:	28 b3       	in	r18, 0x18	; 24
  c6:	f0 e1       	ldi	r31, 0x10	; 16
  c8:	8f 9f       	mul	r24, r31
  ca:	c0 01       	movw	r24, r0
  cc:	11 24       	eor	r1, r1
  ce:	92 2f       	mov	r25, r18
  d0:	9f 70       	andi	r25, 0x0F	; 15
  d2:	89 2b       	or	r24, r25
  d4:	88 bb       	out	0x18, r24	; 24
  d6:	88 b3       	in	r24, 0x18	; 24
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	88 bb       	out	0x18, r24	; 24
  dc:	32 e0       	ldi	r19, 0x02	; 2
  de:	3a 95       	dec	r19
  e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x4c>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_Command+0x52>
  e4:	88 b3       	in	r24, 0x18	; 24
  e6:	8d 7f       	andi	r24, 0xFD	; 253
  e8:	88 bb       	out	0x18, r24	; 24
  ea:	8f e9       	ldi	r24, 0x9F	; 159
  ec:	9f e0       	ldi	r25, 0x0F	; 15
  ee:	01 97       	sbiw	r24, 0x01	; 1
  f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Command+0x5c>
  f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Command+0x62>
  f4:	00 00       	nop
  f6:	08 95       	ret

000000f8 <LCD_Char>:
  f8:	98 b3       	in	r25, 0x18	; 24
  fa:	9f 70       	andi	r25, 0x0F	; 15
  fc:	28 2f       	mov	r18, r24
  fe:	20 7f       	andi	r18, 0xF0	; 240
 100:	92 2b       	or	r25, r18
 102:	98 bb       	out	0x18, r25	; 24
 104:	98 b3       	in	r25, 0x18	; 24
 106:	91 60       	ori	r25, 0x01	; 1
 108:	98 bb       	out	0x18, r25	; 24
 10a:	98 b3       	in	r25, 0x18	; 24
 10c:	92 60       	ori	r25, 0x02	; 2
 10e:	98 bb       	out	0x18, r25	; 24
 110:	32 e0       	ldi	r19, 0x02	; 2
 112:	3a 95       	dec	r19
 114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Char+0x1a>
 116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Char+0x20>
 118:	98 b3       	in	r25, 0x18	; 24
 11a:	9d 7f       	andi	r25, 0xFD	; 253
 11c:	98 bb       	out	0x18, r25	; 24
 11e:	ef e8       	ldi	r30, 0x8F	; 143
 120:	f1 e0       	ldi	r31, 0x01	; 1
 122:	31 97       	sbiw	r30, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Char+0x2a>
 126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Char+0x30>
 128:	00 00       	nop
 12a:	28 b3       	in	r18, 0x18	; 24
 12c:	f0 e1       	ldi	r31, 0x10	; 16
 12e:	8f 9f       	mul	r24, r31
 130:	c0 01       	movw	r24, r0
 132:	11 24       	eor	r1, r1
 134:	92 2f       	mov	r25, r18
 136:	9f 70       	andi	r25, 0x0F	; 15
 138:	89 2b       	or	r24, r25
 13a:	88 bb       	out	0x18, r24	; 24
 13c:	88 b3       	in	r24, 0x18	; 24
 13e:	82 60       	ori	r24, 0x02	; 2
 140:	88 bb       	out	0x18, r24	; 24
 142:	32 e0       	ldi	r19, 0x02	; 2
 144:	3a 95       	dec	r19
 146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Char+0x4c>
 148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Char+0x52>
 14a:	88 b3       	in	r24, 0x18	; 24
 14c:	8d 7f       	andi	r24, 0xFD	; 253
 14e:	88 bb       	out	0x18, r24	; 24
 150:	8f e9       	ldi	r24, 0x9F	; 159
 152:	9f e0       	ldi	r25, 0x0F	; 15
 154:	01 97       	sbiw	r24, 0x01	; 1
 156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Char+0x5c>
 158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Char+0x62>
 15a:	00 00       	nop
 15c:	08 95       	ret

0000015e <LCD_Init>:
 15e:	8f ef       	ldi	r24, 0xFF	; 255
 160:	87 bb       	out	0x17, r24	; 23
 162:	8f e3       	ldi	r24, 0x3F	; 63
 164:	9c e9       	ldi	r25, 0x9C	; 156
 166:	01 97       	sbiw	r24, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Init+0x8>
 16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Init+0xe>
 16c:	00 00       	nop
 16e:	83 e3       	ldi	r24, 0x33	; 51
 170:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 174:	82 e3       	ldi	r24, 0x32	; 50
 176:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 17a:	88 e2       	ldi	r24, 0x28	; 40
 17c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 180:	8c e0       	ldi	r24, 0x0C	; 12
 182:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 186:	86 e0       	ldi	r24, 0x06	; 6
 188:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 18c:	81 e0       	ldi	r24, 0x01	; 1
 18e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 192:	8f e9       	ldi	r24, 0x9F	; 159
 194:	9f e0       	ldi	r25, 0x0F	; 15
 196:	01 97       	sbiw	r24, 0x01	; 1
 198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Init+0x38>
 19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Init+0x3e>
 19c:	00 00       	nop
 19e:	80 e8       	ldi	r24, 0x80	; 128
 1a0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1a4:	08 95       	ret

000001a6 <LCD_String>:
 1a6:	0f 93       	push	r16
 1a8:	1f 93       	push	r17
 1aa:	cf 93       	push	r28
 1ac:	df 93       	push	r29
 1ae:	8c 01       	movw	r16, r24
 1b0:	c0 e0       	ldi	r28, 0x00	; 0
 1b2:	d0 e0       	ldi	r29, 0x00	; 0
 1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCD_String+0x16>
 1b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_Char>
 1ba:	21 96       	adiw	r28, 0x01	; 1
 1bc:	f8 01       	movw	r30, r16
 1be:	ec 0f       	add	r30, r28
 1c0:	fd 1f       	adc	r31, r29
 1c2:	80 81       	ld	r24, Z
 1c4:	81 11       	cpse	r24, r1
 1c6:	f7 cf       	rjmp	.-18     	; 0x1b6 <LCD_String+0x10>
 1c8:	df 91       	pop	r29
 1ca:	cf 91       	pop	r28
 1cc:	1f 91       	pop	r17
 1ce:	0f 91       	pop	r16
 1d0:	08 95       	ret

000001d2 <LCD_Clear>:
 1d2:	81 e0       	ldi	r24, 0x01	; 1
 1d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1d8:	8f e9       	ldi	r24, 0x9F	; 159
 1da:	9f e0       	ldi	r25, 0x0F	; 15
 1dc:	01 97       	sbiw	r24, 0x01	; 1
 1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_Clear+0xa>
 1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Clear+0x10>
 1e2:	00 00       	nop
 1e4:	80 e8       	ldi	r24, 0x80	; 128
 1e6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 1ea:	08 95       	ret

000001ec <keyfind>:
 1ec:	80 ef       	ldi	r24, 0xF0	; 240
 1ee:	84 bb       	out	0x14, r24	; 20
 1f0:	8f ef       	ldi	r24, 0xFF	; 255
 1f2:	85 bb       	out	0x15, r24	; 21
 1f4:	85 b3       	in	r24, 0x15	; 21
 1f6:	8f 70       	andi	r24, 0x0F	; 15
 1f8:	85 bb       	out	0x15, r24	; 21
 1fa:	00 00       	nop
 1fc:	83 b3       	in	r24, 0x13	; 19
 1fe:	8f 70       	andi	r24, 0x0F	; 15
 200:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 204:	8f 30       	cpi	r24, 0x0F	; 15
 206:	b1 f7       	brne	.-20     	; 0x1f4 <keyfind+0x8>
 208:	8f e3       	ldi	r24, 0x3F	; 63
 20a:	9c e9       	ldi	r25, 0x9C	; 156
 20c:	01 97       	sbiw	r24, 0x01	; 1
 20e:	f1 f7       	brne	.-4      	; 0x20c <keyfind+0x20>
 210:	00 c0       	rjmp	.+0      	; 0x212 <keyfind+0x26>
 212:	00 00       	nop
 214:	83 b3       	in	r24, 0x13	; 19
 216:	8f 70       	andi	r24, 0x0F	; 15
 218:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 21c:	8f 30       	cpi	r24, 0x0F	; 15
 21e:	a1 f3       	breq	.-24     	; 0x208 <keyfind+0x1c>
 220:	8f ee       	ldi	r24, 0xEF	; 239
 222:	85 bb       	out	0x15, r24	; 21
 224:	00 00       	nop
 226:	83 b3       	in	r24, 0x13	; 19
 228:	8f 70       	andi	r24, 0x0F	; 15
 22a:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 22e:	8f 30       	cpi	r24, 0x0F	; 15
 230:	19 f0       	breq	.+6      	; 0x238 <keyfind+0x4c>
 232:	10 92 2f 01 	sts	0x012F, r1	; 0x80012f <rowloc>
 236:	27 c0       	rjmp	.+78     	; 0x286 <keyfind+0x9a>
 238:	8f ed       	ldi	r24, 0xDF	; 223
 23a:	85 bb       	out	0x15, r24	; 21
 23c:	00 00       	nop
 23e:	83 b3       	in	r24, 0x13	; 19
 240:	8f 70       	andi	r24, 0x0F	; 15
 242:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 246:	8f 30       	cpi	r24, 0x0F	; 15
 248:	21 f0       	breq	.+8      	; 0x252 <keyfind+0x66>
 24a:	81 e0       	ldi	r24, 0x01	; 1
 24c:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rowloc>
 250:	1a c0       	rjmp	.+52     	; 0x286 <keyfind+0x9a>
 252:	8f eb       	ldi	r24, 0xBF	; 191
 254:	85 bb       	out	0x15, r24	; 21
 256:	00 00       	nop
 258:	83 b3       	in	r24, 0x13	; 19
 25a:	8f 70       	andi	r24, 0x0F	; 15
 25c:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 260:	8f 30       	cpi	r24, 0x0F	; 15
 262:	21 f0       	breq	.+8      	; 0x26c <keyfind+0x80>
 264:	82 e0       	ldi	r24, 0x02	; 2
 266:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rowloc>
 26a:	0d c0       	rjmp	.+26     	; 0x286 <keyfind+0x9a>
 26c:	8f e7       	ldi	r24, 0x7F	; 127
 26e:	85 bb       	out	0x15, r24	; 21
 270:	00 00       	nop
 272:	83 b3       	in	r24, 0x13	; 19
 274:	8f 70       	andi	r24, 0x0F	; 15
 276:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
 27a:	8f 30       	cpi	r24, 0x0F	; 15
 27c:	09 f4       	brne	.+2      	; 0x280 <keyfind+0x94>
 27e:	b6 cf       	rjmp	.-148    	; 0x1ec <keyfind>
 280:	83 e0       	ldi	r24, 0x03	; 3
 282:	80 93 2f 01 	sts	0x012F, r24	; 0x80012f <rowloc>
 286:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
 28a:	8e 30       	cpi	r24, 0x0E	; 14
 28c:	71 f4       	brne	.+28     	; 0x2aa <keyfind+0xbe>
 28e:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rowloc>
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	ee 0f       	add	r30, r30
 298:	ff 1f       	adc	r31, r31
 29a:	8e 0f       	add	r24, r30
 29c:	9f 1f       	adc	r25, r31
 29e:	fc 01       	movw	r30, r24
 2a0:	e0 5a       	subi	r30, 0xA0	; 160
 2a2:	ff 4f       	sbci	r31, 0xFF	; 255
 2a4:	80 81       	ld	r24, Z
 2a6:	80 53       	subi	r24, 0x30	; 48
 2a8:	08 95       	ret
 2aa:	8d 30       	cpi	r24, 0x0D	; 13
 2ac:	71 f4       	brne	.+28     	; 0x2ca <keyfind+0xde>
 2ae:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rowloc>
 2b2:	90 e0       	ldi	r25, 0x00	; 0
 2b4:	fc 01       	movw	r30, r24
 2b6:	ee 0f       	add	r30, r30
 2b8:	ff 1f       	adc	r31, r31
 2ba:	8e 0f       	add	r24, r30
 2bc:	9f 1f       	adc	r25, r31
 2be:	fc 01       	movw	r30, r24
 2c0:	e0 5a       	subi	r30, 0xA0	; 160
 2c2:	ff 4f       	sbci	r31, 0xFF	; 255
 2c4:	81 81       	ldd	r24, Z+1	; 0x01
 2c6:	80 53       	subi	r24, 0x30	; 48
 2c8:	08 95       	ret
 2ca:	8b 30       	cpi	r24, 0x0B	; 11
 2cc:	71 f4       	brne	.+28     	; 0x2ea <keyfind+0xfe>
 2ce:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rowloc>
 2d2:	90 e0       	ldi	r25, 0x00	; 0
 2d4:	fc 01       	movw	r30, r24
 2d6:	ee 0f       	add	r30, r30
 2d8:	ff 1f       	adc	r31, r31
 2da:	8e 0f       	add	r24, r30
 2dc:	9f 1f       	adc	r25, r31
 2de:	fc 01       	movw	r30, r24
 2e0:	e0 5a       	subi	r30, 0xA0	; 160
 2e2:	ff 4f       	sbci	r31, 0xFF	; 255
 2e4:	82 81       	ldd	r24, Z+2	; 0x02
 2e6:	80 53       	subi	r24, 0x30	; 48
 2e8:	08 95       	ret
 2ea:	80 91 2f 01 	lds	r24, 0x012F	; 0x80012f <rowloc>
 2ee:	90 e0       	ldi	r25, 0x00	; 0
 2f0:	01 96       	adiw	r24, 0x01	; 1
 2f2:	fc 01       	movw	r30, r24
 2f4:	ee 0f       	add	r30, r30
 2f6:	ff 1f       	adc	r31, r31
 2f8:	8e 0f       	add	r24, r30
 2fa:	9f 1f       	adc	r25, r31
 2fc:	fc 01       	movw	r30, r24
 2fe:	e0 5a       	subi	r30, 0xA0	; 160
 300:	ff 4f       	sbci	r31, 0xFF	; 255
 302:	80 81       	ld	r24, Z
 304:	80 53       	subi	r24, 0x30	; 48
 306:	08 95       	ret

00000308 <ADC_Init>:
 308:	1a ba       	out	0x1a, r1	; 26
 30a:	87 e8       	ldi	r24, 0x87	; 135
 30c:	86 b9       	out	0x06, r24	; 6
 30e:	80 e4       	ldi	r24, 0x40	; 64
 310:	87 b9       	out	0x07, r24	; 7
 312:	08 95       	ret

00000314 <ADC_Read>:
 314:	97 b1       	in	r25, 0x07	; 7
 316:	8f 70       	andi	r24, 0x0F	; 15
 318:	98 2b       	or	r25, r24
 31a:	97 b9       	out	0x07, r25	; 7
 31c:	86 b1       	in	r24, 0x06	; 6
 31e:	80 64       	ori	r24, 0x40	; 64
 320:	86 b9       	out	0x06, r24	; 6
 322:	34 9b       	sbis	0x06, 4	; 6
 324:	fe cf       	rjmp	.-4      	; 0x322 <ADC_Read+0xe>
 326:	8a e1       	ldi	r24, 0x1A	; 26
 328:	8a 95       	dec	r24
 32a:	f1 f7       	brne	.-4      	; 0x328 <ADC_Read+0x14>
 32c:	00 c0       	rjmp	.+0      	; 0x32e <ADC_Read+0x1a>
 32e:	24 b1       	in	r18, 0x04	; 4
 330:	85 b1       	in	r24, 0x05	; 5
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	98 2f       	mov	r25, r24
 336:	88 27       	eor	r24, r24
 338:	82 0f       	add	r24, r18
 33a:	91 1d       	adc	r25, r1
 33c:	08 95       	ret

0000033e <USART_init>:
 33e:	2a b1       	in	r18, 0x0a	; 10
 340:	28 61       	ori	r18, 0x18	; 24
 342:	2a b9       	out	0x0a, r18	; 10
 344:	20 b5       	in	r18, 0x20	; 32
 346:	26 68       	ori	r18, 0x86	; 134
 348:	20 bd       	out	0x20, r18	; 32
 34a:	dc 01       	movw	r26, r24
 34c:	cb 01       	movw	r24, r22
 34e:	88 0f       	add	r24, r24
 350:	99 1f       	adc	r25, r25
 352:	aa 1f       	adc	r26, r26
 354:	bb 1f       	adc	r27, r27
 356:	88 0f       	add	r24, r24
 358:	99 1f       	adc	r25, r25
 35a:	aa 1f       	adc	r26, r26
 35c:	bb 1f       	adc	r27, r27
 35e:	9c 01       	movw	r18, r24
 360:	ad 01       	movw	r20, r26
 362:	22 0f       	add	r18, r18
 364:	33 1f       	adc	r19, r19
 366:	44 1f       	adc	r20, r20
 368:	55 1f       	adc	r21, r21
 36a:	22 0f       	add	r18, r18
 36c:	33 1f       	adc	r19, r19
 36e:	44 1f       	adc	r20, r20
 370:	55 1f       	adc	r21, r21
 372:	60 e0       	ldi	r22, 0x00	; 0
 374:	72 e1       	ldi	r23, 0x12	; 18
 376:	8a e7       	ldi	r24, 0x7A	; 122
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	0e 94 93 05 	call	0xb26	; 0xb26 <__udivmodsi4>
 37e:	8f ef       	ldi	r24, 0xFF	; 255
 380:	82 0f       	add	r24, r18
 382:	89 b9       	out	0x09, r24	; 9
 384:	da 01       	movw	r26, r20
 386:	c9 01       	movw	r24, r18
 388:	01 97       	sbiw	r24, 0x01	; 1
 38a:	a1 09       	sbc	r26, r1
 38c:	b1 09       	sbc	r27, r1
 38e:	89 2f       	mov	r24, r25
 390:	9a 2f       	mov	r25, r26
 392:	ab 2f       	mov	r26, r27
 394:	bb 27       	eor	r27, r27
 396:	80 bd       	out	0x20, r24	; 32
 398:	08 95       	ret

0000039a <USART_rxc>:
 39a:	5f 9b       	sbis	0x0b, 7	; 11
 39c:	fe cf       	rjmp	.-4      	; 0x39a <USART_rxc>
 39e:	8c b1       	in	r24, 0x0c	; 12
 3a0:	08 95       	ret

000003a2 <HCSR04Init>:
 3a2:	9a b3       	in	r25, 0x1a	; 26
 3a4:	21 e0       	ldi	r18, 0x01	; 1
 3a6:	30 e0       	ldi	r19, 0x00	; 0
 3a8:	02 c0       	rjmp	.+4      	; 0x3ae <HCSR04Init+0xc>
 3aa:	22 0f       	add	r18, r18
 3ac:	33 1f       	adc	r19, r19
 3ae:	8a 95       	dec	r24
 3b0:	e2 f7       	brpl	.-8      	; 0x3aa <HCSR04Init+0x8>
 3b2:	29 2b       	or	r18, r25
 3b4:	2a bb       	out	0x1a, r18	; 26
 3b6:	08 95       	ret

000003b8 <HCSR04Trigger>:
 3b8:	4b b3       	in	r20, 0x1b	; 27
 3ba:	21 e0       	ldi	r18, 0x01	; 1
 3bc:	30 e0       	ldi	r19, 0x00	; 0
 3be:	b9 01       	movw	r22, r18
 3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <HCSR04Trigger+0xe>
 3c2:	66 0f       	add	r22, r22
 3c4:	77 1f       	adc	r23, r23
 3c6:	8a 95       	dec	r24
 3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <HCSR04Trigger+0xa>
 3ca:	cb 01       	movw	r24, r22
 3cc:	46 2b       	or	r20, r22
 3ce:	4b bb       	out	0x1b, r20	; 27
 3d0:	78 e2       	ldi	r23, 0x28	; 40
 3d2:	7a 95       	dec	r23
 3d4:	f1 f7       	brne	.-4      	; 0x3d2 <HCSR04Trigger+0x1a>
 3d6:	9b b3       	in	r25, 0x1b	; 27
 3d8:	80 95       	com	r24
 3da:	89 23       	and	r24, r25
 3dc:	8b bb       	out	0x1b, r24	; 27
 3de:	08 95       	ret

000003e0 <GetPulseWidth>:
 3e0:	40 e0       	ldi	r20, 0x00	; 0
 3e2:	50 e0       	ldi	r21, 0x00	; 0
 3e4:	ba 01       	movw	r22, r20
 3e6:	0e c0       	rjmp	.+28     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
 3e8:	29 b3       	in	r18, 0x19	; 25
 3ea:	30 e0       	ldi	r19, 0x00	; 0
 3ec:	08 2e       	mov	r0, r24
 3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <GetPulseWidth+0x14>
 3f0:	35 95       	asr	r19
 3f2:	27 95       	ror	r18
 3f4:	0a 94       	dec	r0
 3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <GetPulseWidth+0x10>
 3f8:	20 fd       	sbrc	r18, 0
 3fa:	0b c0       	rjmp	.+22     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3fc:	4f 5f       	subi	r20, 0xFF	; 255
 3fe:	5f 4f       	sbci	r21, 0xFF	; 255
 400:	6f 4f       	sbci	r22, 0xFF	; 255
 402:	7f 4f       	sbci	r23, 0xFF	; 255
 404:	40 3c       	cpi	r20, 0xC0	; 192
 406:	27 e2       	ldi	r18, 0x27	; 39
 408:	52 07       	cpc	r21, r18
 40a:	29 e0       	ldi	r18, 0x09	; 9
 40c:	62 07       	cpc	r22, r18
 40e:	71 05       	cpc	r23, r1
 410:	58 f3       	brcs	.-42     	; 0x3e8 <GetPulseWidth+0x8>
 412:	40 3c       	cpi	r20, 0xC0	; 192
 414:	57 42       	sbci	r21, 0x27	; 39
 416:	69 40       	sbci	r22, 0x09	; 9
 418:	71 05       	cpc	r23, r1
 41a:	c1 f1       	breq	.+112    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
 41c:	1f bc       	out	0x2f, r1	; 47
 41e:	92 e0       	ldi	r25, 0x02	; 2
 420:	9e bd       	out	0x2e, r25	; 46
 422:	1d bc       	out	0x2d, r1	; 45
 424:	1c bc       	out	0x2c, r1	; 44
 426:	40 e0       	ldi	r20, 0x00	; 0
 428:	50 e0       	ldi	r21, 0x00	; 0
 42a:	ba 01       	movw	r22, r20
 42c:	13 c0       	rjmp	.+38     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 42e:	29 b3       	in	r18, 0x19	; 25
 430:	30 e0       	ldi	r19, 0x00	; 0
 432:	08 2e       	mov	r0, r24
 434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 436:	35 95       	asr	r19
 438:	27 95       	ror	r18
 43a:	0a 94       	dec	r0
 43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
 43e:	20 ff       	sbrs	r18, 0
 440:	10 c0       	rjmp	.+32     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 442:	2c b5       	in	r18, 0x2c	; 44
 444:	3d b5       	in	r19, 0x2d	; 45
 446:	21 36       	cpi	r18, 0x61	; 97
 448:	3a 4e       	sbci	r19, 0xEA	; 234
 44a:	58 f4       	brcc	.+22     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
 44c:	4f 5f       	subi	r20, 0xFF	; 255
 44e:	5f 4f       	sbci	r21, 0xFF	; 255
 450:	6f 4f       	sbci	r22, 0xFF	; 255
 452:	7f 4f       	sbci	r23, 0xFF	; 255
 454:	40 3c       	cpi	r20, 0xC0	; 192
 456:	27 e2       	ldi	r18, 0x27	; 39
 458:	52 07       	cpc	r21, r18
 45a:	29 e0       	ldi	r18, 0x09	; 9
 45c:	62 07       	cpc	r22, r18
 45e:	71 05       	cpc	r23, r1
 460:	30 f3       	brcs	.-52     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 462:	40 3c       	cpi	r20, 0xC0	; 192
 464:	57 42       	sbci	r21, 0x27	; 39
 466:	69 40       	sbci	r22, 0x09	; 9
 468:	71 05       	cpc	r23, r1
 46a:	99 f0       	breq	.+38     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
 46c:	8c b5       	in	r24, 0x2c	; 44
 46e:	9d b5       	in	r25, 0x2d	; 45
 470:	a0 e0       	ldi	r26, 0x00	; 0
 472:	b0 e0       	ldi	r27, 0x00	; 0
 474:	1e bc       	out	0x2e, r1	; 46
 476:	81 36       	cpi	r24, 0x61	; 97
 478:	2a ee       	ldi	r18, 0xEA	; 234
 47a:	92 07       	cpc	r25, r18
 47c:	a1 05       	cpc	r26, r1
 47e:	b1 05       	cpc	r27, r1
 480:	58 f4       	brcc	.+22     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
 482:	b6 95       	lsr	r27
 484:	a7 95       	ror	r26
 486:	97 95       	ror	r25
 488:	87 95       	ror	r24
 48a:	08 95       	ret
 48c:	8f ef       	ldi	r24, 0xFF	; 255
 48e:	9f ef       	ldi	r25, 0xFF	; 255
 490:	08 95       	ret
 492:	8e ef       	ldi	r24, 0xFE	; 254
 494:	9f ef       	ldi	r25, 0xFF	; 255
 496:	08 95       	ret
 498:	8e ef       	ldi	r24, 0xFE	; 254
 49a:	9f ef       	ldi	r25, 0xFF	; 255
 49c:	08 95       	ret

0000049e <calculateDistance>:
 49e:	0f 93       	push	r16
 4a0:	1f 93       	push	r17
 4a2:	cf 93       	push	r28
 4a4:	df 93       	push	r29
 4a6:	c8 2f       	mov	r28, r24
 4a8:	d6 2f       	mov	r29, r22
 4aa:	8a 01       	movw	r16, r20
 4ac:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <HCSR04Init>
 4b0:	8c 2f       	mov	r24, r28
 4b2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <HCSR04Trigger>
 4b6:	8d 2f       	mov	r24, r29
 4b8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <GetPulseWidth>
 4bc:	bc 01       	movw	r22, r24
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 98 04 	call	0x930	; 0x930 <__floatunsisf>
 4c6:	26 e9       	ldi	r18, 0x96	; 150
 4c8:	33 e4       	ldi	r19, 0x43	; 67
 4ca:	4b e0       	ldi	r20, 0x0B	; 11
 4cc:	5d e3       	ldi	r21, 0x3D	; 61
 4ce:	0e 94 26 05 	call	0xa4c	; 0xa4c <__mulsf3>
 4d2:	20 e0       	ldi	r18, 0x00	; 0
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	40 e0       	ldi	r20, 0x00	; 0
 4d8:	5f e3       	ldi	r21, 0x3F	; 63
 4da:	0e 94 26 05 	call	0xa4c	; 0xa4c <__mulsf3>
 4de:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__fixsfsi>
 4e2:	60 17       	cp	r22, r16
 4e4:	71 07       	cpc	r23, r17
 4e6:	1c f4       	brge	.+6      	; 0x4ee <calculateDistance+0x50>
 4e8:	81 e0       	ldi	r24, 0x01	; 1
 4ea:	90 e0       	ldi	r25, 0x00	; 0
 4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <calculateDistance+0x54>
 4ee:	80 e0       	ldi	r24, 0x00	; 0
 4f0:	90 e0       	ldi	r25, 0x00	; 0
 4f2:	df 91       	pop	r29
 4f4:	cf 91       	pop	r28
 4f6:	1f 91       	pop	r17
 4f8:	0f 91       	pop	r16
 4fa:	08 95       	ret

000004fc <PWM_init>:
void PWM_init()
{
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
 4fc:	89 e6       	ldi	r24, 0x69	; 105
 4fe:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
 500:	87 b3       	in	r24, 0x17	; 23
 502:	88 60       	ori	r24, 0x08	; 8
 504:	87 bb       	out	0x17, r24	; 23
 506:	08 95       	ret

00000508 <servo1ninety>:
void servo2zero(void);

void servo1ninety(void)
{
	
	PORTD = 0x20;
 508:	80 e2       	ldi	r24, 0x20	; 32
 50a:	82 bb       	out	0x12, r24	; 18
	while(1)
	{
		//Rotate Motor to 0 degree
		PORTD = 0x20;
 50c:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 50e:	ef ec       	ldi	r30, 0xCF	; 207
 510:	f7 e0       	ldi	r31, 0x07	; 7
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	f1 f7       	brne	.-4      	; 0x512 <servo1ninety+0xa>
 516:	00 c0       	rjmp	.+0      	; 0x518 <servo1ninety+0x10>
 518:	00 00       	nop
		_delay_us(1000);
		PORTD = 0x00;
 51a:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 51c:	ff ef       	ldi	r31, 0xFF	; 255
 51e:	23 ed       	ldi	r18, 0xD3	; 211
 520:	30 e3       	ldi	r19, 0x30	; 48
 522:	f1 50       	subi	r31, 0x01	; 1
 524:	20 40       	sbci	r18, 0x00	; 0
 526:	30 40       	sbci	r19, 0x00	; 0
 528:	e1 f7       	brne	.-8      	; 0x522 <servo1ninety+0x1a>
 52a:	00 c0       	rjmp	.+0      	; 0x52c <servo1ninety+0x24>
 52c:	00 00       	nop
		
		_delay_ms(2000);
		
		//Rotate Motor to 90 degree
		PORTD = 0x20;
 52e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 530:	87 eb       	ldi	r24, 0xB7	; 183
 532:	9b e0       	ldi	r25, 0x0B	; 11
 534:	01 97       	sbiw	r24, 0x01	; 1
 536:	f1 f7       	brne	.-4      	; 0x534 <servo1ninety+0x2c>
 538:	00 c0       	rjmp	.+0      	; 0x53a <servo1ninety+0x32>
 53a:	00 00       	nop
		_delay_us(1500);
		PORTD = 0x00;
 53c:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 53e:	9f ef       	ldi	r25, 0xFF	; 255
 540:	e3 ed       	ldi	r30, 0xD3	; 211
 542:	f0 e3       	ldi	r31, 0x30	; 48
 544:	91 50       	subi	r25, 0x01	; 1
 546:	e0 40       	sbci	r30, 0x00	; 0
 548:	f0 40       	sbci	r31, 0x00	; 0
 54a:	e1 f7       	brne	.-8      	; 0x544 <servo1ninety+0x3c>
 54c:	00 c0       	rjmp	.+0      	; 0x54e <servo1ninety+0x46>
 54e:	00 00       	nop
 550:	08 95       	ret

00000552 <servo1zero>:
}

void servo1zero(void)
{
	
	PORTD = 0x20;
 552:	80 e2       	ldi	r24, 0x20	; 32
 554:	82 bb       	out	0x12, r24	; 18
	while(1)
	{
		//Rotate Motor to 0 degree
		PORTD = 0x20;
 556:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 558:	8f ec       	ldi	r24, 0xCF	; 207
 55a:	97 e0       	ldi	r25, 0x07	; 7
 55c:	01 97       	sbiw	r24, 0x01	; 1
 55e:	f1 f7       	brne	.-4      	; 0x55c <servo1zero+0xa>
 560:	00 c0       	rjmp	.+0      	; 0x562 <servo1zero+0x10>
 562:	00 00       	nop
		_delay_us(1000);
		PORTD = 0x00;
 564:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 566:	9f ef       	ldi	r25, 0xFF	; 255
 568:	23 ed       	ldi	r18, 0xD3	; 211
 56a:	80 e3       	ldi	r24, 0x30	; 48
 56c:	91 50       	subi	r25, 0x01	; 1
 56e:	20 40       	sbci	r18, 0x00	; 0
 570:	80 40       	sbci	r24, 0x00	; 0
 572:	e1 f7       	brne	.-8      	; 0x56c <servo1zero+0x1a>
 574:	00 c0       	rjmp	.+0      	; 0x576 <servo1zero+0x24>
 576:	00 00       	nop
 578:	08 95       	ret

0000057a <servo2ninety>:


void servo2ninety(void)
{
	
	PORTD = 0x10;
 57a:	80 e1       	ldi	r24, 0x10	; 16
 57c:	82 bb       	out	0x12, r24	; 18
	while(1)
	{
		//Rotate Motor to 0 degree
		PORTD = 0x10;
 57e:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 580:	ef ec       	ldi	r30, 0xCF	; 207
 582:	f7 e0       	ldi	r31, 0x07	; 7
 584:	31 97       	sbiw	r30, 0x01	; 1
 586:	f1 f7       	brne	.-4      	; 0x584 <servo2ninety+0xa>
 588:	00 c0       	rjmp	.+0      	; 0x58a <servo2ninety+0x10>
 58a:	00 00       	nop
		_delay_us(1000);
		PORTD = 0x00;
 58c:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 58e:	ff ef       	ldi	r31, 0xFF	; 255
 590:	23 ed       	ldi	r18, 0xD3	; 211
 592:	30 e3       	ldi	r19, 0x30	; 48
 594:	f1 50       	subi	r31, 0x01	; 1
 596:	20 40       	sbci	r18, 0x00	; 0
 598:	30 40       	sbci	r19, 0x00	; 0
 59a:	e1 f7       	brne	.-8      	; 0x594 <servo2ninety+0x1a>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <servo2ninety+0x24>
 59e:	00 00       	nop
		
		_delay_ms(2000);
		
		//Rotate Motor to 90 degree
		PORTD = 0x10;
 5a0:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5a2:	87 eb       	ldi	r24, 0xB7	; 183
 5a4:	9b e0       	ldi	r25, 0x0B	; 11
 5a6:	01 97       	sbiw	r24, 0x01	; 1
 5a8:	f1 f7       	brne	.-4      	; 0x5a6 <servo2ninety+0x2c>
 5aa:	00 c0       	rjmp	.+0      	; 0x5ac <servo2ninety+0x32>
 5ac:	00 00       	nop
		_delay_us(1500);
		PORTD = 0x00;
 5ae:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5b0:	9f ef       	ldi	r25, 0xFF	; 255
 5b2:	e3 ed       	ldi	r30, 0xD3	; 211
 5b4:	f0 e3       	ldi	r31, 0x30	; 48
 5b6:	91 50       	subi	r25, 0x01	; 1
 5b8:	e0 40       	sbci	r30, 0x00	; 0
 5ba:	f0 40       	sbci	r31, 0x00	; 0
 5bc:	e1 f7       	brne	.-8      	; 0x5b6 <servo2ninety+0x3c>
 5be:	00 c0       	rjmp	.+0      	; 0x5c0 <servo2ninety+0x46>
 5c0:	00 00       	nop
 5c2:	08 95       	ret

000005c4 <servo2zero>:
}

void servo2zero(void)
{
	
	PORTD = 0x10;
 5c4:	80 e1       	ldi	r24, 0x10	; 16
 5c6:	82 bb       	out	0x12, r24	; 18
	while(1)
	{
		//Rotate Motor to 0 degree
		PORTD = 0x10;
 5c8:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5ca:	8f ec       	ldi	r24, 0xCF	; 207
 5cc:	97 e0       	ldi	r25, 0x07	; 7
 5ce:	01 97       	sbiw	r24, 0x01	; 1
 5d0:	f1 f7       	brne	.-4      	; 0x5ce <servo2zero+0xa>
 5d2:	00 c0       	rjmp	.+0      	; 0x5d4 <servo2zero+0x10>
 5d4:	00 00       	nop
		_delay_us(1000);
		PORTD = 0x00;
 5d6:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 5d8:	9f ef       	ldi	r25, 0xFF	; 255
 5da:	23 ed       	ldi	r18, 0xD3	; 211
 5dc:	80 e3       	ldi	r24, 0x30	; 48
 5de:	91 50       	subi	r25, 0x01	; 1
 5e0:	20 40       	sbci	r18, 0x00	; 0
 5e2:	80 40       	sbci	r24, 0x00	; 0
 5e4:	e1 f7       	brne	.-8      	; 0x5de <servo2zero+0x1a>
 5e6:	00 c0       	rjmp	.+0      	; 0x5e8 <servo2zero+0x24>
 5e8:	00 00       	nop
 5ea:	08 95       	ret

000005ec <prepareMeal>:
			}
		}
    }
}

void prepareMeal(int weight){
 5ec:	cf 93       	push	r28
 5ee:	df 93       	push	r29
 5f0:	ec 01       	movw	r28, r24
	
	//weight can be 50g(key 3) 70g(key 4)
	LCD_Clear();
 5f2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
	LCD_String("Place the Bowl");
 5f6:	8c e6       	ldi	r24, 0x6C	; 108
 5f8:	90 e0       	ldi	r25, 0x00	; 0
 5fa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 5fe:	2f ef       	ldi	r18, 0xFF	; 255
 600:	80 e7       	ldi	r24, 0x70	; 112
 602:	92 e0       	ldi	r25, 0x02	; 2
 604:	21 50       	subi	r18, 0x01	; 1
 606:	80 40       	sbci	r24, 0x00	; 0
 608:	90 40       	sbci	r25, 0x00	; 0
 60a:	e1 f7       	brne	.-8      	; 0x604 <prepareMeal+0x18>
 60c:	00 c0       	rjmp	.+0      	; 0x60e <prepareMeal+0x22>
 60e:	00 00       	nop
	_delay_ms(100);
	int BowlFlag=calculateDistance(PA3,PA5,10);//20 in proteus
 610:	4a e0       	ldi	r20, 0x0A	; 10
 612:	50 e0       	ldi	r21, 0x00	; 0
 614:	65 e0       	ldi	r22, 0x05	; 5
 616:	83 e0       	ldi	r24, 0x03	; 3
 618:	0e 94 4f 02 	call	0x49e	; 0x49e <calculateDistance>
	if(BowlFlag==1){
 61c:	01 97       	sbiw	r24, 0x01	; 1
 61e:	09 f0       	breq	.+2      	; 0x622 <prepareMeal+0x36>
 620:	75 c0       	rjmp	.+234    	; 0x70c <prepareMeal+0x120>
		LCD_Clear();
 622:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
		LCD_String("Press cook(2)");
 626:	8b e7       	ldi	r24, 0x7B	; 123
 628:	90 e0       	ldi	r25, 0x00	; 0
 62a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 62e:	2f ef       	ldi	r18, 0xFF	; 255
 630:	89 e6       	ldi	r24, 0x69	; 105
 632:	98 e1       	ldi	r25, 0x18	; 24
 634:	21 50       	subi	r18, 0x01	; 1
 636:	80 40       	sbci	r24, 0x00	; 0
 638:	90 40       	sbci	r25, 0x00	; 0
 63a:	e1 f7       	brne	.-8      	; 0x634 <prepareMeal+0x48>
 63c:	00 c0       	rjmp	.+0      	; 0x63e <prepareMeal+0x52>
 63e:	00 00       	nop
		_delay_ms(1000);
		int key1=keyfind();
 640:	0e 94 f6 00 	call	0x1ec	; 0x1ec <keyfind>
		if(key1==2){
 644:	82 30       	cpi	r24, 0x02	; 2
 646:	09 f0       	breq	.+2      	; 0x64a <prepareMeal+0x5e>
 648:	67 c0       	rjmp	.+206    	; 0x718 <prepareMeal+0x12c>
	
			servo1ninety();//servo top lid
 64a:	0e 94 84 02 	call	0x508	; 0x508 <servo1ninety>
			while(/*loadCellRead()*/weight+1<=weight){};
 64e:	ce 01       	movw	r24, r28
 650:	01 96       	adiw	r24, 0x01	; 1
 652:	c8 17       	cp	r28, r24
 654:	d9 07       	cpc	r29, r25
 656:	dc f7       	brge	.-10     	; 0x64e <prepareMeal+0x62>
			servo1zero();//close servo top lid
 658:	0e 94 a9 02 	call	0x552	; 0x552 <servo1zero>
 65c:	2f ef       	ldi	r18, 0xFF	; 255
 65e:	89 e6       	ldi	r24, 0x69	; 105
 660:	98 e1       	ldi	r25, 0x18	; 24
 662:	21 50       	subi	r18, 0x01	; 1
 664:	80 40       	sbci	r24, 0x00	; 0
 666:	90 40       	sbci	r25, 0x00	; 0
 668:	e1 f7       	brne	.-8      	; 0x662 <prepareMeal+0x76>
 66a:	00 c0       	rjmp	.+0      	; 0x66c <prepareMeal+0x80>
 66c:	00 00       	nop
			_delay_ms(1000);
			servo2ninety();//servo bottom lid open
 66e:	0e 94 bd 02 	call	0x57a	; 0x57a <servo2ninety>
 672:	2f ef       	ldi	r18, 0xFF	; 255
 674:	83 ed       	ldi	r24, 0xD3	; 211
 676:	90 e3       	ldi	r25, 0x30	; 48
 678:	21 50       	subi	r18, 0x01	; 1
 67a:	80 40       	sbci	r24, 0x00	; 0
 67c:	90 40       	sbci	r25, 0x00	; 0
 67e:	e1 f7       	brne	.-8      	; 0x678 <prepareMeal+0x8c>
 680:	00 c0       	rjmp	.+0      	; 0x682 <prepareMeal+0x96>
 682:	00 00       	nop
			_delay_ms(2000);
			servo2zero();//servo bottom close
 684:	0e 94 e2 02 	call	0x5c4	; 0x5c4 <servo2zero>
			
			portHigh(PORTD,6);
 688:	82 b3       	in	r24, 0x12	; 18
 68a:	80 64       	ori	r24, 0x40	; 64
 68c:	82 bb       	out	0x12, r24	; 18
 68e:	8f e1       	ldi	r24, 0x1F	; 31
 690:	9e e4       	ldi	r25, 0x4E	; 78
 692:	01 97       	sbiw	r24, 0x01	; 1
 694:	f1 f7       	brne	.-4      	; 0x692 <prepareMeal+0xa6>
 696:	00 c0       	rjmp	.+0      	; 0x698 <prepareMeal+0xac>
 698:	00 00       	nop
			_delay_ms(10);
			PORTD = 0x00;
 69a:	12 ba       	out	0x12, r1	; 18
 69c:	9f ef       	ldi	r25, 0xFF	; 255
 69e:	2d e3       	ldi	r18, 0x3D	; 61
 6a0:	89 e4       	ldi	r24, 0x49	; 73
 6a2:	91 50       	subi	r25, 0x01	; 1
 6a4:	20 40       	sbci	r18, 0x00	; 0
 6a6:	80 40       	sbci	r24, 0x00	; 0
 6a8:	e1 f7       	brne	.-8      	; 0x6a2 <prepareMeal+0xb6>
 6aa:	00 c0       	rjmp	.+0      	; 0x6ac <prepareMeal+0xc0>
 6ac:	00 00       	nop
			_delay_ms(3000);
			portHigh(PORTD,7);
 6ae:	82 b3       	in	r24, 0x12	; 18
 6b0:	80 68       	ori	r24, 0x80	; 128
 6b2:	82 bb       	out	0x12, r24	; 18
 6b4:	9f ef       	ldi	r25, 0xFF	; 255
 6b6:	20 e7       	ldi	r18, 0x70	; 112
 6b8:	82 e0       	ldi	r24, 0x02	; 2
 6ba:	91 50       	subi	r25, 0x01	; 1
 6bc:	20 40       	sbci	r18, 0x00	; 0
 6be:	80 40       	sbci	r24, 0x00	; 0
 6c0:	e1 f7       	brne	.-8      	; 0x6ba <prepareMeal+0xce>
 6c2:	00 c0       	rjmp	.+0      	; 0x6c4 <prepareMeal+0xd8>
 6c4:	00 00       	nop
			_delay_ms(100);
			PORTD =0x00;
 6c6:	12 ba       	out	0x12, r1	; 18
 6c8:	9f ef       	ldi	r25, 0xFF	; 255
 6ca:	23 ed       	ldi	r18, 0xD3	; 211
 6cc:	80 e3       	ldi	r24, 0x30	; 48
 6ce:	91 50       	subi	r25, 0x01	; 1
 6d0:	20 40       	sbci	r18, 0x00	; 0
 6d2:	80 40       	sbci	r24, 0x00	; 0
 6d4:	e1 f7       	brne	.-8      	; 0x6ce <prepareMeal+0xe2>
 6d6:	00 c0       	rjmp	.+0      	; 0x6d8 <prepareMeal+0xec>
 6d8:	00 00       	nop
			//OCR2=0;//turn off DC motor
			
			//OCR0=50; //speed van vary between 0-254 //turn on water pump
			//_delay_ms(4000);
			//OCR0=0; //turn off water pump
			LCD_Clear();
 6da:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			LCD_String("Cornflakes");
 6de:	89 e8       	ldi	r24, 0x89	; 137
 6e0:	90 e0       	ldi	r25, 0x00	; 0
 6e2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
			LCD_Command(0XC0);
 6e6:	80 ec       	ldi	r24, 0xC0	; 192
 6e8:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
			LCD_String("Ready");
 6ec:	84 e9       	ldi	r24, 0x94	; 148
 6ee:	90 e0       	ldi	r25, 0x00	; 0
 6f0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 6f4:	9f ef       	ldi	r25, 0xFF	; 255
 6f6:	29 e6       	ldi	r18, 0x69	; 105
 6f8:	88 e1       	ldi	r24, 0x18	; 24
 6fa:	91 50       	subi	r25, 0x01	; 1
 6fc:	20 40       	sbci	r18, 0x00	; 0
 6fe:	80 40       	sbci	r24, 0x00	; 0
 700:	e1 f7       	brne	.-8      	; 0x6fa <prepareMeal+0x10e>
 702:	00 c0       	rjmp	.+0      	; 0x704 <prepareMeal+0x118>
 704:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear();
 706:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
 70a:	06 c0       	rjmp	.+12     	; 0x718 <prepareMeal+0x12c>
			
		}
		
		
	}else{
		LCD_Clear();
 70c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
		LCD_String("Place Bowl");
 710:	8a e9       	ldi	r24, 0x9A	; 154
 712:	90 e0       	ldi	r25, 0x00	; 0
 714:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
	}
}
 718:	df 91       	pop	r29
 71a:	cf 91       	pop	r28
 71c:	08 95       	ret

0000071e <main>:
#define F_CPU 8000000UL
#include "headerfiles.h"
void prepareMeal(int);
int main(void){
 71e:	cf 93       	push	r28
 720:	df 93       	push	r29
 722:	cd b7       	in	r28, 0x3d	; 61
 724:	de b7       	in	r29, 0x3e	; 62
 726:	2c 97       	sbiw	r28, 0x0c	; 12
 728:	0f b6       	in	r0, 0x3f	; 63
 72a:	f8 94       	cli
 72c:	de bf       	out	0x3e, r29	; 62
 72e:	0f be       	out	0x3f, r0	; 63
 730:	cd bf       	out	0x3d, r28	; 61
	DDRD=0xF4;
 732:	84 ef       	ldi	r24, 0xF4	; 244
 734:	81 bb       	out	0x11, r24	; 17
	LCD_Init();_delay_ms(50);
 736:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Init>
 73a:	2f e7       	ldi	r18, 0x7F	; 127
 73c:	88 e3       	ldi	r24, 0x38	; 56
 73e:	91 e0       	ldi	r25, 0x01	; 1
 740:	21 50       	subi	r18, 0x01	; 1
 742:	80 40       	sbci	r24, 0x00	; 0
 744:	90 40       	sbci	r25, 0x00	; 0
 746:	e1 f7       	brne	.-8      	; 0x740 <main+0x22>
 748:	00 c0       	rjmp	.+0      	; 0x74a <main+0x2c>
 74a:	00 00       	nop
	ADC_Init();
 74c:	0e 94 84 01 	call	0x308	; 0x308 <ADC_Init>
	PWM_init();
 750:	0e 94 7e 02 	call	0x4fc	; 0x4fc <PWM_init>
	USART_init(9600);
 754:	60 e8       	ldi	r22, 0x80	; 128
 756:	75 e2       	ldi	r23, 0x25	; 37
 758:	80 e0       	ldi	r24, 0x00	; 0
 75a:	90 e0       	ldi	r25, 0x00	; 0
 75c:	0e 94 9f 01 	call	0x33e	; 0x33e <USART_init>
	char RFID[12]="/0"; memset(RFID,0,15);
 760:	8f e2       	ldi	r24, 0x2F	; 47
 762:	90 e3       	ldi	r25, 0x30	; 48
 764:	9a 83       	std	Y+2, r25	; 0x02
 766:	89 83       	std	Y+1, r24	; 0x01
 768:	1c 82       	std	Y+4, r1	; 0x04
 76a:	1b 82       	std	Y+3, r1	; 0x03
 76c:	fe 01       	movw	r30, r28
 76e:	35 96       	adiw	r30, 0x05	; 5
 770:	88 e0       	ldi	r24, 0x08	; 8
 772:	df 01       	movw	r26, r30
 774:	1d 92       	st	X+, r1
 776:	8a 95       	dec	r24
 778:	e9 f7       	brne	.-6      	; 0x774 <main+0x56>
 77a:	34 97       	sbiw	r30, 0x04	; 4
 77c:	8f e0       	ldi	r24, 0x0F	; 15
 77e:	df 01       	movw	r26, r30
 780:	1d 92       	st	X+, r1
 782:	8a 95       	dec	r24
 784:	e9 f7       	brne	.-6      	; 0x780 <main+0x62>
	LCD_Clear(); LCD_String("Welcome");LCD_Command(0xC0); LCD_String("Press Start");
 786:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
 78a:	85 ea       	ldi	r24, 0xA5	; 165
 78c:	90 e0       	ldi	r25, 0x00	; 0
 78e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 792:	80 ec       	ldi	r24, 0xC0	; 192
 794:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
 798:	8d ea       	ldi	r24, 0xAD	; 173
 79a:	90 e0       	ldi	r25, 0x00	; 0
 79c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 7a0:	bf ef       	ldi	r27, 0xFF	; 255
 7a2:	29 e6       	ldi	r18, 0x69	; 105
 7a4:	88 e1       	ldi	r24, 0x18	; 24
 7a6:	b1 50       	subi	r27, 0x01	; 1
 7a8:	20 40       	sbci	r18, 0x00	; 0
 7aa:	80 40       	sbci	r24, 0x00	; 0
 7ac:	e1 f7       	brne	.-8      	; 0x7a6 <main+0x88>
 7ae:	00 c0       	rjmp	.+0      	; 0x7b0 <main+0x92>
 7b0:	00 00       	nop
	_delay_ms(1000);
	
	start:
    while (1){
		//read milk level
		int MilkFlag=calculateDistance(PA6,PA7,12);//24 in proteus
 7b2:	4c e0       	ldi	r20, 0x0C	; 12
 7b4:	50 e0       	ldi	r21, 0x00	; 0
 7b6:	67 e0       	ldi	r22, 0x07	; 7
 7b8:	86 e0       	ldi	r24, 0x06	; 6
 7ba:	0e 94 4f 02 	call	0x49e	; 0x49e <calculateDistance>
		if(MilkFlag != 1){
 7be:	01 97       	sbiw	r24, 0x01	; 1
 7c0:	39 f0       	breq	.+14     	; 0x7d0 <main+0xb2>
			LCD_Clear();
 7c2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			LCD_String("Low milk level");
 7c6:	89 eb       	ldi	r24, 0xB9	; 185
 7c8:	90 e0       	ldi	r25, 0x00	; 0
 7ca:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 7ce:	ff cf       	rjmp	.-2      	; 0x7ce <main+0xb0>
			while(1){}
		}else{
			//read temperature and turn on heater
			LCD_Clear();
 7d0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			while((ADC_Read(2)/2)<=65){
 7d4:	16 c0       	rjmp	.+44     	; 0x802 <__DATA_REGION_LENGTH__+0x2>
				LCD_String("Milk Heating");
 7d6:	88 ec       	ldi	r24, 0xC8	; 200
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				LCD_Command(0xC0);
 7de:	80 ec       	ldi	r24, 0xC0	; 192
 7e0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("in Process");
 7e4:	85 ed       	ldi	r24, 0xD5	; 213
 7e6:	90 e0       	ldi	r25, 0x00	; 0
 7e8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 7ec:	9f ef       	ldi	r25, 0xFF	; 255
 7ee:	a3 ed       	ldi	r26, 0xD3	; 211
 7f0:	b0 e3       	ldi	r27, 0x30	; 48
 7f2:	91 50       	subi	r25, 0x01	; 1
 7f4:	a0 40       	sbci	r26, 0x00	; 0
 7f6:	b0 40       	sbci	r27, 0x00	; 0
 7f8:	e1 f7       	brne	.-8      	; 0x7f2 <main+0xd4>
 7fa:	00 c0       	rjmp	.+0      	; 0x7fc <main+0xde>
 7fc:	00 00       	nop
				_delay_ms(2000);
				PORTD=0x04;
 7fe:	84 e0       	ldi	r24, 0x04	; 4
 800:	82 bb       	out	0x12, r24	; 18
			LCD_String("Low milk level");
			while(1){}
		}else{
			//read temperature and turn on heater
			LCD_Clear();
			while((ADC_Read(2)/2)<=65){
 802:	82 e0       	ldi	r24, 0x02	; 2
 804:	0e 94 8a 01 	call	0x314	; 0x314 <ADC_Read>
 808:	84 38       	cpi	r24, 0x84	; 132
 80a:	91 05       	cpc	r25, r1
 80c:	24 f3       	brlt	.-56     	; 0x7d6 <main+0xb8>
				LCD_Command(0xC0);
				LCD_String("in Process");
				_delay_ms(2000);
				PORTD=0x04;
			}
			PORTD = 0x00;
 80e:	12 ba       	out	0x12, r1	; 18
		}
		//start button 1
		int keyStart =keyfind();
 810:	0e 94 f6 00 	call	0x1ec	; 0x1ec <keyfind>
		if(keyStart==1){
 814:	81 30       	cpi	r24, 0x01	; 1
 816:	69 f6       	brne	.-102    	; 0x7b2 <main+0x94>
			LCD_Clear();
 818:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			LCD_String("Show RFID tag");
 81c:	80 ee       	ldi	r24, 0xE0	; 224
 81e:	90 e0       	ldi	r25, 0x00	; 0
 820:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
			for (int i=0;i<12;i++){ //read rfid chars
 824:	00 e0       	ldi	r16, 0x00	; 0
 826:	10 e0       	ldi	r17, 0x00	; 0
 828:	0b c0       	rjmp	.+22     	; 0x840 <__DATA_REGION_LENGTH__+0x40>
				RFID[i]=USART_rxc();
 82a:	0e 94 cd 01 	call	0x39a	; 0x39a <USART_rxc>
 82e:	e1 e0       	ldi	r30, 0x01	; 1
 830:	f0 e0       	ldi	r31, 0x00	; 0
 832:	ec 0f       	add	r30, r28
 834:	fd 1f       	adc	r31, r29
 836:	e0 0f       	add	r30, r16
 838:	f1 1f       	adc	r31, r17
 83a:	80 83       	st	Z, r24
		//start button 1
		int keyStart =keyfind();
		if(keyStart==1){
			LCD_Clear();
			LCD_String("Show RFID tag");
			for (int i=0;i<12;i++){ //read rfid chars
 83c:	0f 5f       	subi	r16, 0xFF	; 255
 83e:	1f 4f       	sbci	r17, 0xFF	; 255
 840:	0c 30       	cpi	r16, 0x0C	; 12
 842:	11 05       	cpc	r17, r1
 844:	94 f3       	brlt	.-28     	; 0x82a <__DATA_REGION_LENGTH__+0x2a>
				RFID[i]=USART_rxc();
			}
			LCD_Clear();
 846:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			if(strcmp(RFID,"123456789012")==0){//if registered user
 84a:	6e ee       	ldi	r22, 0xEE	; 238
 84c:	70 e0       	ldi	r23, 0x00	; 0
 84e:	ce 01       	movw	r24, r28
 850:	01 96       	adiw	r24, 0x01	; 1
 852:	0e 94 b5 05 	call	0xb6a	; 0xb6a <strcmp>
 856:	89 2b       	or	r24, r25
 858:	f1 f4       	brne	.+60     	; 0x896 <__stack+0x37>
				LCD_String("Select The Size");
 85a:	8b ef       	ldi	r24, 0xFB	; 251
 85c:	90 e0       	ldi	r25, 0x00	; 0
 85e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				LCD_Command(0xC0);
 862:	80 ec       	ldi	r24, 0xC0	; 192
 864:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("3: Small 4:Large");
 868:	8b e0       	ldi	r24, 0x0B	; 11
 86a:	91 e0       	ldi	r25, 0x01	; 1
 86c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				int key=keyfind();
 870:	0e 94 f6 00 	call	0x1ec	; 0x1ec <keyfind>
 874:	90 e0       	ldi	r25, 0x00	; 0
				if(key==3){
 876:	83 30       	cpi	r24, 0x03	; 3
 878:	91 05       	cpc	r25, r1
 87a:	29 f4       	brne	.+10     	; 0x886 <__stack+0x27>
					prepareMeal(50);
 87c:	82 e3       	ldi	r24, 0x32	; 50
 87e:	90 e0       	ldi	r25, 0x00	; 0
 880:	0e 94 f6 02 	call	0x5ec	; 0x5ec <prepareMeal>
 884:	96 cf       	rjmp	.-212    	; 0x7b2 <main+0x94>
				}else if(key==4){
 886:	04 97       	sbiw	r24, 0x04	; 4
 888:	09 f0       	breq	.+2      	; 0x88c <__stack+0x2d>
 88a:	93 cf       	rjmp	.-218    	; 0x7b2 <main+0x94>
					prepareMeal(70);
 88c:	86 e4       	ldi	r24, 0x46	; 70
 88e:	90 e0       	ldi	r25, 0x00	; 0
 890:	0e 94 f6 02 	call	0x5ec	; 0x5ec <prepareMeal>
 894:	8e cf       	rjmp	.-228    	; 0x7b2 <main+0x94>
				}else{
					goto start;
				}
			}else{
				LCD_Clear();
 896:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
				LCD_String("Unregistered");
 89a:	8c e1       	ldi	r24, 0x1C	; 28
 89c:	91 e0       	ldi	r25, 0x01	; 1
 89e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				LCD_Command(0xC0);
 8a2:	80 ec       	ldi	r24, 0xC0	; 192
 8a4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("User");
 8a8:	89 e2       	ldi	r24, 0x29	; 41
 8aa:	91 e0       	ldi	r25, 0x01	; 1
 8ac:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
 8b0:	2f ef       	ldi	r18, 0xFF	; 255
 8b2:	8d e3       	ldi	r24, 0x3D	; 61
 8b4:	99 e4       	ldi	r25, 0x49	; 73
 8b6:	21 50       	subi	r18, 0x01	; 1
 8b8:	80 40       	sbci	r24, 0x00	; 0
 8ba:	90 40       	sbci	r25, 0x00	; 0
 8bc:	e1 f7       	brne	.-8      	; 0x8b6 <__stack+0x57>
 8be:	00 c0       	rjmp	.+0      	; 0x8c0 <__stack+0x61>
 8c0:	00 00       	nop
 8c2:	77 cf       	rjmp	.-274    	; 0x7b2 <main+0x94>

000008c4 <__fixsfsi>:
 8c4:	0e 94 69 04 	call	0x8d2	; 0x8d2 <__fixunssfsi>
 8c8:	68 94       	set
 8ca:	b1 11       	cpse	r27, r1
 8cc:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__fp_szero>
 8d0:	08 95       	ret

000008d2 <__fixunssfsi>:
 8d2:	0e 94 05 05 	call	0xa0a	; 0xa0a <__fp_splitA>
 8d6:	88 f0       	brcs	.+34     	; 0x8fa <__fixunssfsi+0x28>
 8d8:	9f 57       	subi	r25, 0x7F	; 127
 8da:	98 f0       	brcs	.+38     	; 0x902 <__fixunssfsi+0x30>
 8dc:	b9 2f       	mov	r27, r25
 8de:	99 27       	eor	r25, r25
 8e0:	b7 51       	subi	r27, 0x17	; 23
 8e2:	b0 f0       	brcs	.+44     	; 0x910 <__fixunssfsi+0x3e>
 8e4:	e1 f0       	breq	.+56     	; 0x91e <__fixunssfsi+0x4c>
 8e6:	66 0f       	add	r22, r22
 8e8:	77 1f       	adc	r23, r23
 8ea:	88 1f       	adc	r24, r24
 8ec:	99 1f       	adc	r25, r25
 8ee:	1a f0       	brmi	.+6      	; 0x8f6 <__fixunssfsi+0x24>
 8f0:	ba 95       	dec	r27
 8f2:	c9 f7       	brne	.-14     	; 0x8e6 <__fixunssfsi+0x14>
 8f4:	14 c0       	rjmp	.+40     	; 0x91e <__fixunssfsi+0x4c>
 8f6:	b1 30       	cpi	r27, 0x01	; 1
 8f8:	91 f0       	breq	.+36     	; 0x91e <__fixunssfsi+0x4c>
 8fa:	0e 94 1f 05 	call	0xa3e	; 0xa3e <__fp_zero>
 8fe:	b1 e0       	ldi	r27, 0x01	; 1
 900:	08 95       	ret
 902:	0c 94 1f 05 	jmp	0xa3e	; 0xa3e <__fp_zero>
 906:	67 2f       	mov	r22, r23
 908:	78 2f       	mov	r23, r24
 90a:	88 27       	eor	r24, r24
 90c:	b8 5f       	subi	r27, 0xF8	; 248
 90e:	39 f0       	breq	.+14     	; 0x91e <__fixunssfsi+0x4c>
 910:	b9 3f       	cpi	r27, 0xF9	; 249
 912:	cc f3       	brlt	.-14     	; 0x906 <__fixunssfsi+0x34>
 914:	86 95       	lsr	r24
 916:	77 95       	ror	r23
 918:	67 95       	ror	r22
 91a:	b3 95       	inc	r27
 91c:	d9 f7       	brne	.-10     	; 0x914 <__fixunssfsi+0x42>
 91e:	3e f4       	brtc	.+14     	; 0x92e <__fixunssfsi+0x5c>
 920:	90 95       	com	r25
 922:	80 95       	com	r24
 924:	70 95       	com	r23
 926:	61 95       	neg	r22
 928:	7f 4f       	sbci	r23, 0xFF	; 255
 92a:	8f 4f       	sbci	r24, 0xFF	; 255
 92c:	9f 4f       	sbci	r25, 0xFF	; 255
 92e:	08 95       	ret

00000930 <__floatunsisf>:
 930:	e8 94       	clt
 932:	09 c0       	rjmp	.+18     	; 0x946 <__floatsisf+0x12>

00000934 <__floatsisf>:
 934:	97 fb       	bst	r25, 7
 936:	3e f4       	brtc	.+14     	; 0x946 <__floatsisf+0x12>
 938:	90 95       	com	r25
 93a:	80 95       	com	r24
 93c:	70 95       	com	r23
 93e:	61 95       	neg	r22
 940:	7f 4f       	sbci	r23, 0xFF	; 255
 942:	8f 4f       	sbci	r24, 0xFF	; 255
 944:	9f 4f       	sbci	r25, 0xFF	; 255
 946:	99 23       	and	r25, r25
 948:	a9 f0       	breq	.+42     	; 0x974 <__floatsisf+0x40>
 94a:	f9 2f       	mov	r31, r25
 94c:	96 e9       	ldi	r25, 0x96	; 150
 94e:	bb 27       	eor	r27, r27
 950:	93 95       	inc	r25
 952:	f6 95       	lsr	r31
 954:	87 95       	ror	r24
 956:	77 95       	ror	r23
 958:	67 95       	ror	r22
 95a:	b7 95       	ror	r27
 95c:	f1 11       	cpse	r31, r1
 95e:	f8 cf       	rjmp	.-16     	; 0x950 <__floatsisf+0x1c>
 960:	fa f4       	brpl	.+62     	; 0x9a0 <__floatsisf+0x6c>
 962:	bb 0f       	add	r27, r27
 964:	11 f4       	brne	.+4      	; 0x96a <__floatsisf+0x36>
 966:	60 ff       	sbrs	r22, 0
 968:	1b c0       	rjmp	.+54     	; 0x9a0 <__floatsisf+0x6c>
 96a:	6f 5f       	subi	r22, 0xFF	; 255
 96c:	7f 4f       	sbci	r23, 0xFF	; 255
 96e:	8f 4f       	sbci	r24, 0xFF	; 255
 970:	9f 4f       	sbci	r25, 0xFF	; 255
 972:	16 c0       	rjmp	.+44     	; 0x9a0 <__floatsisf+0x6c>
 974:	88 23       	and	r24, r24
 976:	11 f0       	breq	.+4      	; 0x97c <__floatsisf+0x48>
 978:	96 e9       	ldi	r25, 0x96	; 150
 97a:	11 c0       	rjmp	.+34     	; 0x99e <__floatsisf+0x6a>
 97c:	77 23       	and	r23, r23
 97e:	21 f0       	breq	.+8      	; 0x988 <__floatsisf+0x54>
 980:	9e e8       	ldi	r25, 0x8E	; 142
 982:	87 2f       	mov	r24, r23
 984:	76 2f       	mov	r23, r22
 986:	05 c0       	rjmp	.+10     	; 0x992 <__floatsisf+0x5e>
 988:	66 23       	and	r22, r22
 98a:	71 f0       	breq	.+28     	; 0x9a8 <__floatsisf+0x74>
 98c:	96 e8       	ldi	r25, 0x86	; 134
 98e:	86 2f       	mov	r24, r22
 990:	70 e0       	ldi	r23, 0x00	; 0
 992:	60 e0       	ldi	r22, 0x00	; 0
 994:	2a f0       	brmi	.+10     	; 0x9a0 <__floatsisf+0x6c>
 996:	9a 95       	dec	r25
 998:	66 0f       	add	r22, r22
 99a:	77 1f       	adc	r23, r23
 99c:	88 1f       	adc	r24, r24
 99e:	da f7       	brpl	.-10     	; 0x996 <__floatsisf+0x62>
 9a0:	88 0f       	add	r24, r24
 9a2:	96 95       	lsr	r25
 9a4:	87 95       	ror	r24
 9a6:	97 f9       	bld	r25, 7
 9a8:	08 95       	ret

000009aa <__fp_inf>:
 9aa:	97 f9       	bld	r25, 7
 9ac:	9f 67       	ori	r25, 0x7F	; 127
 9ae:	80 e8       	ldi	r24, 0x80	; 128
 9b0:	70 e0       	ldi	r23, 0x00	; 0
 9b2:	60 e0       	ldi	r22, 0x00	; 0
 9b4:	08 95       	ret

000009b6 <__fp_nan>:
 9b6:	9f ef       	ldi	r25, 0xFF	; 255
 9b8:	80 ec       	ldi	r24, 0xC0	; 192
 9ba:	08 95       	ret

000009bc <__fp_pscA>:
 9bc:	00 24       	eor	r0, r0
 9be:	0a 94       	dec	r0
 9c0:	16 16       	cp	r1, r22
 9c2:	17 06       	cpc	r1, r23
 9c4:	18 06       	cpc	r1, r24
 9c6:	09 06       	cpc	r0, r25
 9c8:	08 95       	ret

000009ca <__fp_pscB>:
 9ca:	00 24       	eor	r0, r0
 9cc:	0a 94       	dec	r0
 9ce:	12 16       	cp	r1, r18
 9d0:	13 06       	cpc	r1, r19
 9d2:	14 06       	cpc	r1, r20
 9d4:	05 06       	cpc	r0, r21
 9d6:	08 95       	ret

000009d8 <__fp_round>:
 9d8:	09 2e       	mov	r0, r25
 9da:	03 94       	inc	r0
 9dc:	00 0c       	add	r0, r0
 9de:	11 f4       	brne	.+4      	; 0x9e4 <__fp_round+0xc>
 9e0:	88 23       	and	r24, r24
 9e2:	52 f0       	brmi	.+20     	; 0x9f8 <__fp_round+0x20>
 9e4:	bb 0f       	add	r27, r27
 9e6:	40 f4       	brcc	.+16     	; 0x9f8 <__fp_round+0x20>
 9e8:	bf 2b       	or	r27, r31
 9ea:	11 f4       	brne	.+4      	; 0x9f0 <__fp_round+0x18>
 9ec:	60 ff       	sbrs	r22, 0
 9ee:	04 c0       	rjmp	.+8      	; 0x9f8 <__fp_round+0x20>
 9f0:	6f 5f       	subi	r22, 0xFF	; 255
 9f2:	7f 4f       	sbci	r23, 0xFF	; 255
 9f4:	8f 4f       	sbci	r24, 0xFF	; 255
 9f6:	9f 4f       	sbci	r25, 0xFF	; 255
 9f8:	08 95       	ret

000009fa <__fp_split3>:
 9fa:	57 fd       	sbrc	r21, 7
 9fc:	90 58       	subi	r25, 0x80	; 128
 9fe:	44 0f       	add	r20, r20
 a00:	55 1f       	adc	r21, r21
 a02:	59 f0       	breq	.+22     	; 0xa1a <__fp_splitA+0x10>
 a04:	5f 3f       	cpi	r21, 0xFF	; 255
 a06:	71 f0       	breq	.+28     	; 0xa24 <__fp_splitA+0x1a>
 a08:	47 95       	ror	r20

00000a0a <__fp_splitA>:
 a0a:	88 0f       	add	r24, r24
 a0c:	97 fb       	bst	r25, 7
 a0e:	99 1f       	adc	r25, r25
 a10:	61 f0       	breq	.+24     	; 0xa2a <__fp_splitA+0x20>
 a12:	9f 3f       	cpi	r25, 0xFF	; 255
 a14:	79 f0       	breq	.+30     	; 0xa34 <__fp_splitA+0x2a>
 a16:	87 95       	ror	r24
 a18:	08 95       	ret
 a1a:	12 16       	cp	r1, r18
 a1c:	13 06       	cpc	r1, r19
 a1e:	14 06       	cpc	r1, r20
 a20:	55 1f       	adc	r21, r21
 a22:	f2 cf       	rjmp	.-28     	; 0xa08 <__fp_split3+0xe>
 a24:	46 95       	lsr	r20
 a26:	f1 df       	rcall	.-30     	; 0xa0a <__fp_splitA>
 a28:	08 c0       	rjmp	.+16     	; 0xa3a <__fp_splitA+0x30>
 a2a:	16 16       	cp	r1, r22
 a2c:	17 06       	cpc	r1, r23
 a2e:	18 06       	cpc	r1, r24
 a30:	99 1f       	adc	r25, r25
 a32:	f1 cf       	rjmp	.-30     	; 0xa16 <__fp_splitA+0xc>
 a34:	86 95       	lsr	r24
 a36:	71 05       	cpc	r23, r1
 a38:	61 05       	cpc	r22, r1
 a3a:	08 94       	sec
 a3c:	08 95       	ret

00000a3e <__fp_zero>:
 a3e:	e8 94       	clt

00000a40 <__fp_szero>:
 a40:	bb 27       	eor	r27, r27
 a42:	66 27       	eor	r22, r22
 a44:	77 27       	eor	r23, r23
 a46:	cb 01       	movw	r24, r22
 a48:	97 f9       	bld	r25, 7
 a4a:	08 95       	ret

00000a4c <__mulsf3>:
 a4c:	0e 94 39 05 	call	0xa72	; 0xa72 <__mulsf3x>
 a50:	0c 94 ec 04 	jmp	0x9d8	; 0x9d8 <__fp_round>
 a54:	0e 94 de 04 	call	0x9bc	; 0x9bc <__fp_pscA>
 a58:	38 f0       	brcs	.+14     	; 0xa68 <__mulsf3+0x1c>
 a5a:	0e 94 e5 04 	call	0x9ca	; 0x9ca <__fp_pscB>
 a5e:	20 f0       	brcs	.+8      	; 0xa68 <__mulsf3+0x1c>
 a60:	95 23       	and	r25, r21
 a62:	11 f0       	breq	.+4      	; 0xa68 <__mulsf3+0x1c>
 a64:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_inf>
 a68:	0c 94 db 04 	jmp	0x9b6	; 0x9b6 <__fp_nan>
 a6c:	11 24       	eor	r1, r1
 a6e:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__fp_szero>

00000a72 <__mulsf3x>:
 a72:	0e 94 fd 04 	call	0x9fa	; 0x9fa <__fp_split3>
 a76:	70 f3       	brcs	.-36     	; 0xa54 <__mulsf3+0x8>

00000a78 <__mulsf3_pse>:
 a78:	95 9f       	mul	r25, r21
 a7a:	c1 f3       	breq	.-16     	; 0xa6c <__mulsf3+0x20>
 a7c:	95 0f       	add	r25, r21
 a7e:	50 e0       	ldi	r21, 0x00	; 0
 a80:	55 1f       	adc	r21, r21
 a82:	62 9f       	mul	r22, r18
 a84:	f0 01       	movw	r30, r0
 a86:	72 9f       	mul	r23, r18
 a88:	bb 27       	eor	r27, r27
 a8a:	f0 0d       	add	r31, r0
 a8c:	b1 1d       	adc	r27, r1
 a8e:	63 9f       	mul	r22, r19
 a90:	aa 27       	eor	r26, r26
 a92:	f0 0d       	add	r31, r0
 a94:	b1 1d       	adc	r27, r1
 a96:	aa 1f       	adc	r26, r26
 a98:	64 9f       	mul	r22, r20
 a9a:	66 27       	eor	r22, r22
 a9c:	b0 0d       	add	r27, r0
 a9e:	a1 1d       	adc	r26, r1
 aa0:	66 1f       	adc	r22, r22
 aa2:	82 9f       	mul	r24, r18
 aa4:	22 27       	eor	r18, r18
 aa6:	b0 0d       	add	r27, r0
 aa8:	a1 1d       	adc	r26, r1
 aaa:	62 1f       	adc	r22, r18
 aac:	73 9f       	mul	r23, r19
 aae:	b0 0d       	add	r27, r0
 ab0:	a1 1d       	adc	r26, r1
 ab2:	62 1f       	adc	r22, r18
 ab4:	83 9f       	mul	r24, r19
 ab6:	a0 0d       	add	r26, r0
 ab8:	61 1d       	adc	r22, r1
 aba:	22 1f       	adc	r18, r18
 abc:	74 9f       	mul	r23, r20
 abe:	33 27       	eor	r19, r19
 ac0:	a0 0d       	add	r26, r0
 ac2:	61 1d       	adc	r22, r1
 ac4:	23 1f       	adc	r18, r19
 ac6:	84 9f       	mul	r24, r20
 ac8:	60 0d       	add	r22, r0
 aca:	21 1d       	adc	r18, r1
 acc:	82 2f       	mov	r24, r18
 ace:	76 2f       	mov	r23, r22
 ad0:	6a 2f       	mov	r22, r26
 ad2:	11 24       	eor	r1, r1
 ad4:	9f 57       	subi	r25, 0x7F	; 127
 ad6:	50 40       	sbci	r21, 0x00	; 0
 ad8:	9a f0       	brmi	.+38     	; 0xb00 <__mulsf3_pse+0x88>
 ada:	f1 f0       	breq	.+60     	; 0xb18 <__mulsf3_pse+0xa0>
 adc:	88 23       	and	r24, r24
 ade:	4a f0       	brmi	.+18     	; 0xaf2 <__mulsf3_pse+0x7a>
 ae0:	ee 0f       	add	r30, r30
 ae2:	ff 1f       	adc	r31, r31
 ae4:	bb 1f       	adc	r27, r27
 ae6:	66 1f       	adc	r22, r22
 ae8:	77 1f       	adc	r23, r23
 aea:	88 1f       	adc	r24, r24
 aec:	91 50       	subi	r25, 0x01	; 1
 aee:	50 40       	sbci	r21, 0x00	; 0
 af0:	a9 f7       	brne	.-22     	; 0xadc <__mulsf3_pse+0x64>
 af2:	9e 3f       	cpi	r25, 0xFE	; 254
 af4:	51 05       	cpc	r21, r1
 af6:	80 f0       	brcs	.+32     	; 0xb18 <__mulsf3_pse+0xa0>
 af8:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__fp_inf>
 afc:	0c 94 20 05 	jmp	0xa40	; 0xa40 <__fp_szero>
 b00:	5f 3f       	cpi	r21, 0xFF	; 255
 b02:	e4 f3       	brlt	.-8      	; 0xafc <__mulsf3_pse+0x84>
 b04:	98 3e       	cpi	r25, 0xE8	; 232
 b06:	d4 f3       	brlt	.-12     	; 0xafc <__mulsf3_pse+0x84>
 b08:	86 95       	lsr	r24
 b0a:	77 95       	ror	r23
 b0c:	67 95       	ror	r22
 b0e:	b7 95       	ror	r27
 b10:	f7 95       	ror	r31
 b12:	e7 95       	ror	r30
 b14:	9f 5f       	subi	r25, 0xFF	; 255
 b16:	c1 f7       	brne	.-16     	; 0xb08 <__mulsf3_pse+0x90>
 b18:	fe 2b       	or	r31, r30
 b1a:	88 0f       	add	r24, r24
 b1c:	91 1d       	adc	r25, r1
 b1e:	96 95       	lsr	r25
 b20:	87 95       	ror	r24
 b22:	97 f9       	bld	r25, 7
 b24:	08 95       	ret

00000b26 <__udivmodsi4>:
 b26:	a1 e2       	ldi	r26, 0x21	; 33
 b28:	1a 2e       	mov	r1, r26
 b2a:	aa 1b       	sub	r26, r26
 b2c:	bb 1b       	sub	r27, r27
 b2e:	fd 01       	movw	r30, r26
 b30:	0d c0       	rjmp	.+26     	; 0xb4c <__udivmodsi4_ep>

00000b32 <__udivmodsi4_loop>:
 b32:	aa 1f       	adc	r26, r26
 b34:	bb 1f       	adc	r27, r27
 b36:	ee 1f       	adc	r30, r30
 b38:	ff 1f       	adc	r31, r31
 b3a:	a2 17       	cp	r26, r18
 b3c:	b3 07       	cpc	r27, r19
 b3e:	e4 07       	cpc	r30, r20
 b40:	f5 07       	cpc	r31, r21
 b42:	20 f0       	brcs	.+8      	; 0xb4c <__udivmodsi4_ep>
 b44:	a2 1b       	sub	r26, r18
 b46:	b3 0b       	sbc	r27, r19
 b48:	e4 0b       	sbc	r30, r20
 b4a:	f5 0b       	sbc	r31, r21

00000b4c <__udivmodsi4_ep>:
 b4c:	66 1f       	adc	r22, r22
 b4e:	77 1f       	adc	r23, r23
 b50:	88 1f       	adc	r24, r24
 b52:	99 1f       	adc	r25, r25
 b54:	1a 94       	dec	r1
 b56:	69 f7       	brne	.-38     	; 0xb32 <__udivmodsi4_loop>
 b58:	60 95       	com	r22
 b5a:	70 95       	com	r23
 b5c:	80 95       	com	r24
 b5e:	90 95       	com	r25
 b60:	9b 01       	movw	r18, r22
 b62:	ac 01       	movw	r20, r24
 b64:	bd 01       	movw	r22, r26
 b66:	cf 01       	movw	r24, r30
 b68:	08 95       	ret

00000b6a <strcmp>:
 b6a:	fb 01       	movw	r30, r22
 b6c:	dc 01       	movw	r26, r24
 b6e:	8d 91       	ld	r24, X+
 b70:	01 90       	ld	r0, Z+
 b72:	80 19       	sub	r24, r0
 b74:	01 10       	cpse	r0, r1
 b76:	d9 f3       	breq	.-10     	; 0xb6e <strcmp+0x4>
 b78:	99 0b       	sbc	r25, r25
 b7a:	08 95       	ret

00000b7c <_exit>:
 b7c:	f8 94       	cli

00000b7e <__stop_program>:
 b7e:	ff cf       	rjmp	.-2      	; 0xb7e <__stop_program>
