
FullCode.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001004  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000100  00800060  00001004  00001098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000005  00800160  00800160  00001198  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001198  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000011c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e8  00000000  00000000  00001204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001ccf  00000000  00000000  000012ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000808  00000000  00000000  00002fbb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000cd9  00000000  00000000  000037c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000023c  00000000  00000000  0000449c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000558  00000000  00000000  000046d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000013e0  00000000  00000000  00004c30  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  00006010  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e0       	ldi	r30, 0x04	; 4
      68:	f0 e1       	ldi	r31, 0x10	; 16
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 36       	cpi	r26, 0x60	; 96
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	a0 e6       	ldi	r26, 0x60	; 96
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 36       	cpi	r26, 0x65	; 101
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 b4 04 	call	0x968	; 0x968 <main>
      8a:	0c 94 00 08 	jmp	0x1000	; 0x1000 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <LCD_Command>:
	while (*str!='\0')
	{
		USART_txc(*str);
		str++;
	}
      92:	98 b3       	in	r25, 0x18	; 24
      94:	9f 70       	andi	r25, 0x0F	; 15
      96:	28 2f       	mov	r18, r24
      98:	20 7f       	andi	r18, 0xF0	; 240
      9a:	92 2b       	or	r25, r18
      9c:	98 bb       	out	0x18, r25	; 24
      9e:	98 b3       	in	r25, 0x18	; 24
      a0:	9e 7f       	andi	r25, 0xFE	; 254
      a2:	98 bb       	out	0x18, r25	; 24
      a4:	98 b3       	in	r25, 0x18	; 24
      a6:	92 60       	ori	r25, 0x02	; 2
      a8:	98 bb       	out	0x18, r25	; 24
      aa:	32 e0       	ldi	r19, 0x02	; 2
      ac:	3a 95       	dec	r19
      ae:	f1 f7       	brne	.-4      	; 0xac <LCD_Command+0x1a>
      b0:	00 c0       	rjmp	.+0      	; 0xb2 <LCD_Command+0x20>
      b2:	98 b3       	in	r25, 0x18	; 24
      b4:	9d 7f       	andi	r25, 0xFD	; 253
      b6:	98 bb       	out	0x18, r25	; 24
      b8:	ef e8       	ldi	r30, 0x8F	; 143
      ba:	f1 e0       	ldi	r31, 0x01	; 1
      bc:	31 97       	sbiw	r30, 0x01	; 1
      be:	f1 f7       	brne	.-4      	; 0xbc <LCD_Command+0x2a>
      c0:	00 c0       	rjmp	.+0      	; 0xc2 <LCD_Command+0x30>
      c2:	00 00       	nop
      c4:	28 b3       	in	r18, 0x18	; 24
      c6:	f0 e1       	ldi	r31, 0x10	; 16
      c8:	8f 9f       	mul	r24, r31
      ca:	c0 01       	movw	r24, r0
      cc:	11 24       	eor	r1, r1
      ce:	92 2f       	mov	r25, r18
      d0:	9f 70       	andi	r25, 0x0F	; 15
      d2:	89 2b       	or	r24, r25
      d4:	88 bb       	out	0x18, r24	; 24
      d6:	88 b3       	in	r24, 0x18	; 24
      d8:	82 60       	ori	r24, 0x02	; 2
      da:	88 bb       	out	0x18, r24	; 24
      dc:	32 e0       	ldi	r19, 0x02	; 2
      de:	3a 95       	dec	r19
      e0:	f1 f7       	brne	.-4      	; 0xde <LCD_Command+0x4c>
      e2:	00 c0       	rjmp	.+0      	; 0xe4 <LCD_Command+0x52>
      e4:	88 b3       	in	r24, 0x18	; 24
      e6:	8d 7f       	andi	r24, 0xFD	; 253
      e8:	88 bb       	out	0x18, r24	; 24
      ea:	8f e9       	ldi	r24, 0x9F	; 159
      ec:	9f e0       	ldi	r25, 0x0F	; 15
      ee:	01 97       	sbiw	r24, 0x01	; 1
      f0:	f1 f7       	brne	.-4      	; 0xee <LCD_Command+0x5c>
      f2:	00 c0       	rjmp	.+0      	; 0xf4 <LCD_Command+0x62>
      f4:	00 00       	nop
      f6:	08 95       	ret

000000f8 <LCD_Char>:
      f8:	98 b3       	in	r25, 0x18	; 24
      fa:	9f 70       	andi	r25, 0x0F	; 15
      fc:	28 2f       	mov	r18, r24
      fe:	20 7f       	andi	r18, 0xF0	; 240
     100:	92 2b       	or	r25, r18
     102:	98 bb       	out	0x18, r25	; 24
     104:	98 b3       	in	r25, 0x18	; 24
     106:	91 60       	ori	r25, 0x01	; 1
     108:	98 bb       	out	0x18, r25	; 24
     10a:	98 b3       	in	r25, 0x18	; 24
     10c:	92 60       	ori	r25, 0x02	; 2
     10e:	98 bb       	out	0x18, r25	; 24
     110:	32 e0       	ldi	r19, 0x02	; 2
     112:	3a 95       	dec	r19
     114:	f1 f7       	brne	.-4      	; 0x112 <LCD_Char+0x1a>
     116:	00 c0       	rjmp	.+0      	; 0x118 <LCD_Char+0x20>
     118:	98 b3       	in	r25, 0x18	; 24
     11a:	9d 7f       	andi	r25, 0xFD	; 253
     11c:	98 bb       	out	0x18, r25	; 24
     11e:	ef e8       	ldi	r30, 0x8F	; 143
     120:	f1 e0       	ldi	r31, 0x01	; 1
     122:	31 97       	sbiw	r30, 0x01	; 1
     124:	f1 f7       	brne	.-4      	; 0x122 <LCD_Char+0x2a>
     126:	00 c0       	rjmp	.+0      	; 0x128 <LCD_Char+0x30>
     128:	00 00       	nop
     12a:	28 b3       	in	r18, 0x18	; 24
     12c:	f0 e1       	ldi	r31, 0x10	; 16
     12e:	8f 9f       	mul	r24, r31
     130:	c0 01       	movw	r24, r0
     132:	11 24       	eor	r1, r1
     134:	92 2f       	mov	r25, r18
     136:	9f 70       	andi	r25, 0x0F	; 15
     138:	89 2b       	or	r24, r25
     13a:	88 bb       	out	0x18, r24	; 24
     13c:	88 b3       	in	r24, 0x18	; 24
     13e:	82 60       	ori	r24, 0x02	; 2
     140:	88 bb       	out	0x18, r24	; 24
     142:	32 e0       	ldi	r19, 0x02	; 2
     144:	3a 95       	dec	r19
     146:	f1 f7       	brne	.-4      	; 0x144 <LCD_Char+0x4c>
     148:	00 c0       	rjmp	.+0      	; 0x14a <LCD_Char+0x52>
     14a:	88 b3       	in	r24, 0x18	; 24
     14c:	8d 7f       	andi	r24, 0xFD	; 253
     14e:	88 bb       	out	0x18, r24	; 24
     150:	8f e9       	ldi	r24, 0x9F	; 159
     152:	9f e0       	ldi	r25, 0x0F	; 15
     154:	01 97       	sbiw	r24, 0x01	; 1
     156:	f1 f7       	brne	.-4      	; 0x154 <LCD_Char+0x5c>
     158:	00 c0       	rjmp	.+0      	; 0x15a <LCD_Char+0x62>
     15a:	00 00       	nop
     15c:	08 95       	ret

0000015e <LCD_Init>:
     15e:	8f ef       	ldi	r24, 0xFF	; 255
     160:	87 bb       	out	0x17, r24	; 23
     162:	8f e3       	ldi	r24, 0x3F	; 63
     164:	9c e9       	ldi	r25, 0x9C	; 156
     166:	01 97       	sbiw	r24, 0x01	; 1
     168:	f1 f7       	brne	.-4      	; 0x166 <LCD_Init+0x8>
     16a:	00 c0       	rjmp	.+0      	; 0x16c <LCD_Init+0xe>
     16c:	00 00       	nop
     16e:	83 e3       	ldi	r24, 0x33	; 51
     170:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     174:	82 e3       	ldi	r24, 0x32	; 50
     176:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     17a:	88 e2       	ldi	r24, 0x28	; 40
     17c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     180:	8c e0       	ldi	r24, 0x0C	; 12
     182:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     186:	86 e0       	ldi	r24, 0x06	; 6
     188:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     18c:	81 e0       	ldi	r24, 0x01	; 1
     18e:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     192:	8f e9       	ldi	r24, 0x9F	; 159
     194:	9f e0       	ldi	r25, 0x0F	; 15
     196:	01 97       	sbiw	r24, 0x01	; 1
     198:	f1 f7       	brne	.-4      	; 0x196 <LCD_Init+0x38>
     19a:	00 c0       	rjmp	.+0      	; 0x19c <LCD_Init+0x3e>
     19c:	00 00       	nop
     19e:	80 e8       	ldi	r24, 0x80	; 128
     1a0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     1a4:	08 95       	ret

000001a6 <LCD_String>:
     1a6:	0f 93       	push	r16
     1a8:	1f 93       	push	r17
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	8c 01       	movw	r16, r24
     1b0:	c0 e0       	ldi	r28, 0x00	; 0
     1b2:	d0 e0       	ldi	r29, 0x00	; 0
     1b4:	03 c0       	rjmp	.+6      	; 0x1bc <LCD_String+0x16>
     1b6:	0e 94 7c 00 	call	0xf8	; 0xf8 <LCD_Char>
     1ba:	21 96       	adiw	r28, 0x01	; 1
     1bc:	f8 01       	movw	r30, r16
     1be:	ec 0f       	add	r30, r28
     1c0:	fd 1f       	adc	r31, r29
     1c2:	80 81       	ld	r24, Z
     1c4:	81 11       	cpse	r24, r1
     1c6:	f7 cf       	rjmp	.-18     	; 0x1b6 <LCD_String+0x10>
     1c8:	df 91       	pop	r29
     1ca:	cf 91       	pop	r28
     1cc:	1f 91       	pop	r17
     1ce:	0f 91       	pop	r16
     1d0:	08 95       	ret

000001d2 <LCD_Clear>:
     1d2:	81 e0       	ldi	r24, 0x01	; 1
     1d4:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     1d8:	8f e9       	ldi	r24, 0x9F	; 159
     1da:	9f e0       	ldi	r25, 0x0F	; 15
     1dc:	01 97       	sbiw	r24, 0x01	; 1
     1de:	f1 f7       	brne	.-4      	; 0x1dc <LCD_Clear+0xa>
     1e0:	00 c0       	rjmp	.+0      	; 0x1e2 <LCD_Clear+0x10>
     1e2:	00 00       	nop
     1e4:	80 e8       	ldi	r24, 0x80	; 128
     1e6:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     1ea:	08 95       	ret

000001ec <keyfind>:
     1ec:	80 ef       	ldi	r24, 0xF0	; 240
     1ee:	84 bb       	out	0x14, r24	; 20
     1f0:	8f ef       	ldi	r24, 0xFF	; 255
     1f2:	85 bb       	out	0x15, r24	; 21
     1f4:	85 b3       	in	r24, 0x15	; 21
     1f6:	8f 70       	andi	r24, 0x0F	; 15
     1f8:	85 bb       	out	0x15, r24	; 21
     1fa:	00 00       	nop
     1fc:	83 b3       	in	r24, 0x13	; 19
     1fe:	8f 70       	andi	r24, 0x0F	; 15
     200:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <colloc>
     204:	8f 30       	cpi	r24, 0x0F	; 15
     206:	b1 f7       	brne	.-20     	; 0x1f4 <keyfind+0x8>
     208:	8f e3       	ldi	r24, 0x3F	; 63
     20a:	9c e9       	ldi	r25, 0x9C	; 156
     20c:	01 97       	sbiw	r24, 0x01	; 1
     20e:	f1 f7       	brne	.-4      	; 0x20c <keyfind+0x20>
     210:	00 c0       	rjmp	.+0      	; 0x212 <keyfind+0x26>
     212:	00 00       	nop
     214:	83 b3       	in	r24, 0x13	; 19
     216:	8f 70       	andi	r24, 0x0F	; 15
     218:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <colloc>
     21c:	8f 30       	cpi	r24, 0x0F	; 15
     21e:	a1 f3       	breq	.-24     	; 0x208 <keyfind+0x1c>
     220:	8f ee       	ldi	r24, 0xEF	; 239
     222:	85 bb       	out	0x15, r24	; 21
     224:	00 00       	nop
     226:	83 b3       	in	r24, 0x13	; 19
     228:	8f 70       	andi	r24, 0x0F	; 15
     22a:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <colloc>
     22e:	8f 30       	cpi	r24, 0x0F	; 15
     230:	19 f0       	breq	.+6      	; 0x238 <keyfind+0x4c>
     232:	10 92 64 01 	sts	0x0164, r1	; 0x800164 <rowloc>
     236:	27 c0       	rjmp	.+78     	; 0x286 <keyfind+0x9a>
     238:	8f ed       	ldi	r24, 0xDF	; 223
     23a:	85 bb       	out	0x15, r24	; 21
     23c:	00 00       	nop
     23e:	83 b3       	in	r24, 0x13	; 19
     240:	8f 70       	andi	r24, 0x0F	; 15
     242:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <colloc>
     246:	8f 30       	cpi	r24, 0x0F	; 15
     248:	21 f0       	breq	.+8      	; 0x252 <keyfind+0x66>
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <rowloc>
     250:	1a c0       	rjmp	.+52     	; 0x286 <keyfind+0x9a>
     252:	8f eb       	ldi	r24, 0xBF	; 191
     254:	85 bb       	out	0x15, r24	; 21
     256:	00 00       	nop
     258:	83 b3       	in	r24, 0x13	; 19
     25a:	8f 70       	andi	r24, 0x0F	; 15
     25c:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <colloc>
     260:	8f 30       	cpi	r24, 0x0F	; 15
     262:	21 f0       	breq	.+8      	; 0x26c <keyfind+0x80>
     264:	82 e0       	ldi	r24, 0x02	; 2
     266:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <rowloc>
     26a:	0d c0       	rjmp	.+26     	; 0x286 <keyfind+0x9a>
     26c:	8f e7       	ldi	r24, 0x7F	; 127
     26e:	85 bb       	out	0x15, r24	; 21
     270:	00 00       	nop
     272:	83 b3       	in	r24, 0x13	; 19
     274:	8f 70       	andi	r24, 0x0F	; 15
     276:	80 93 63 01 	sts	0x0163, r24	; 0x800163 <colloc>
     27a:	8f 30       	cpi	r24, 0x0F	; 15
     27c:	09 f4       	brne	.+2      	; 0x280 <keyfind+0x94>
     27e:	b6 cf       	rjmp	.-148    	; 0x1ec <keyfind>
     280:	83 e0       	ldi	r24, 0x03	; 3
     282:	80 93 64 01 	sts	0x0164, r24	; 0x800164 <rowloc>
     286:	80 91 63 01 	lds	r24, 0x0163	; 0x800163 <colloc>
     28a:	8e 30       	cpi	r24, 0x0E	; 14
     28c:	71 f4       	brne	.+28     	; 0x2aa <keyfind+0xbe>
     28e:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rowloc>
     292:	90 e0       	ldi	r25, 0x00	; 0
     294:	fc 01       	movw	r30, r24
     296:	ee 0f       	add	r30, r30
     298:	ff 1f       	adc	r31, r31
     29a:	8e 0f       	add	r24, r30
     29c:	9f 1f       	adc	r25, r31
     29e:	fc 01       	movw	r30, r24
     2a0:	e0 5a       	subi	r30, 0xA0	; 160
     2a2:	ff 4f       	sbci	r31, 0xFF	; 255
     2a4:	80 81       	ld	r24, Z
     2a6:	80 53       	subi	r24, 0x30	; 48
     2a8:	08 95       	ret
     2aa:	8d 30       	cpi	r24, 0x0D	; 13
     2ac:	71 f4       	brne	.+28     	; 0x2ca <keyfind+0xde>
     2ae:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rowloc>
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	fc 01       	movw	r30, r24
     2b6:	ee 0f       	add	r30, r30
     2b8:	ff 1f       	adc	r31, r31
     2ba:	8e 0f       	add	r24, r30
     2bc:	9f 1f       	adc	r25, r31
     2be:	fc 01       	movw	r30, r24
     2c0:	e0 5a       	subi	r30, 0xA0	; 160
     2c2:	ff 4f       	sbci	r31, 0xFF	; 255
     2c4:	81 81       	ldd	r24, Z+1	; 0x01
     2c6:	80 53       	subi	r24, 0x30	; 48
     2c8:	08 95       	ret
     2ca:	8b 30       	cpi	r24, 0x0B	; 11
     2cc:	71 f4       	brne	.+28     	; 0x2ea <keyfind+0xfe>
     2ce:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rowloc>
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	fc 01       	movw	r30, r24
     2d6:	ee 0f       	add	r30, r30
     2d8:	ff 1f       	adc	r31, r31
     2da:	8e 0f       	add	r24, r30
     2dc:	9f 1f       	adc	r25, r31
     2de:	fc 01       	movw	r30, r24
     2e0:	e0 5a       	subi	r30, 0xA0	; 160
     2e2:	ff 4f       	sbci	r31, 0xFF	; 255
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	80 53       	subi	r24, 0x30	; 48
     2e8:	08 95       	ret
     2ea:	80 91 64 01 	lds	r24, 0x0164	; 0x800164 <rowloc>
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	01 96       	adiw	r24, 0x01	; 1
     2f2:	fc 01       	movw	r30, r24
     2f4:	ee 0f       	add	r30, r30
     2f6:	ff 1f       	adc	r31, r31
     2f8:	8e 0f       	add	r24, r30
     2fa:	9f 1f       	adc	r25, r31
     2fc:	fc 01       	movw	r30, r24
     2fe:	e0 5a       	subi	r30, 0xA0	; 160
     300:	ff 4f       	sbci	r31, 0xFF	; 255
     302:	80 81       	ld	r24, Z
     304:	80 53       	subi	r24, 0x30	; 48
     306:	08 95       	ret

00000308 <ADC_Init>:
     308:	1a ba       	out	0x1a, r1	; 26
     30a:	87 e8       	ldi	r24, 0x87	; 135
     30c:	86 b9       	out	0x06, r24	; 6
     30e:	80 e4       	ldi	r24, 0x40	; 64
     310:	87 b9       	out	0x07, r24	; 7
     312:	08 95       	ret

00000314 <ADC_Read>:
     314:	97 b1       	in	r25, 0x07	; 7
     316:	8f 70       	andi	r24, 0x0F	; 15
     318:	98 2b       	or	r25, r24
     31a:	97 b9       	out	0x07, r25	; 7
     31c:	86 b1       	in	r24, 0x06	; 6
     31e:	80 64       	ori	r24, 0x40	; 64
     320:	86 b9       	out	0x06, r24	; 6
     322:	34 9b       	sbis	0x06, 4	; 6
     324:	fe cf       	rjmp	.-4      	; 0x322 <ADC_Read+0xe>
     326:	8a e1       	ldi	r24, 0x1A	; 26
     328:	8a 95       	dec	r24
     32a:	f1 f7       	brne	.-4      	; 0x328 <ADC_Read+0x14>
     32c:	00 c0       	rjmp	.+0      	; 0x32e <ADC_Read+0x1a>
     32e:	24 b1       	in	r18, 0x04	; 4
     330:	85 b1       	in	r24, 0x05	; 5
     332:	90 e0       	ldi	r25, 0x00	; 0
     334:	98 2f       	mov	r25, r24
     336:	88 27       	eor	r24, r24
     338:	82 0f       	add	r24, r18
     33a:	91 1d       	adc	r25, r1
     33c:	08 95       	ret

0000033e <USART_init>:
     33e:	2a b1       	in	r18, 0x0a	; 10
     340:	28 61       	ori	r18, 0x18	; 24
     342:	2a b9       	out	0x0a, r18	; 10
     344:	20 b5       	in	r18, 0x20	; 32
     346:	26 68       	ori	r18, 0x86	; 134
     348:	20 bd       	out	0x20, r18	; 32
     34a:	dc 01       	movw	r26, r24
     34c:	cb 01       	movw	r24, r22
     34e:	88 0f       	add	r24, r24
     350:	99 1f       	adc	r25, r25
     352:	aa 1f       	adc	r26, r26
     354:	bb 1f       	adc	r27, r27
     356:	88 0f       	add	r24, r24
     358:	99 1f       	adc	r25, r25
     35a:	aa 1f       	adc	r26, r26
     35c:	bb 1f       	adc	r27, r27
     35e:	9c 01       	movw	r18, r24
     360:	ad 01       	movw	r20, r26
     362:	22 0f       	add	r18, r18
     364:	33 1f       	adc	r19, r19
     366:	44 1f       	adc	r20, r20
     368:	55 1f       	adc	r21, r21
     36a:	22 0f       	add	r18, r18
     36c:	33 1f       	adc	r19, r19
     36e:	44 1f       	adc	r20, r20
     370:	55 1f       	adc	r21, r21
     372:	60 e0       	ldi	r22, 0x00	; 0
     374:	72 e1       	ldi	r23, 0x12	; 18
     376:	8a e7       	ldi	r24, 0x7A	; 122
     378:	90 e0       	ldi	r25, 0x00	; 0
     37a:	0e 94 a0 07 	call	0xf40	; 0xf40 <__udivmodsi4>
     37e:	8f ef       	ldi	r24, 0xFF	; 255
     380:	82 0f       	add	r24, r18
     382:	89 b9       	out	0x09, r24	; 9
     384:	da 01       	movw	r26, r20
     386:	c9 01       	movw	r24, r18
     388:	01 97       	sbiw	r24, 0x01	; 1
     38a:	a1 09       	sbc	r26, r1
     38c:	b1 09       	sbc	r27, r1
     38e:	89 2f       	mov	r24, r25
     390:	9a 2f       	mov	r25, r26
     392:	ab 2f       	mov	r26, r27
     394:	bb 27       	eor	r27, r27
     396:	80 bd       	out	0x20, r24	; 32
     398:	08 95       	ret

0000039a <USART_rxc>:
     39a:	5f 9b       	sbis	0x0b, 7	; 11
     39c:	fe cf       	rjmp	.-4      	; 0x39a <USART_rxc>
     39e:	8c b1       	in	r24, 0x0c	; 12
     3a0:	08 95       	ret

000003a2 <HCSR04Init>:


void lcd_command( unsigned char );

void HCSR04Init(char trig){
	US_DDR|=(1<<trig);
     3a2:	9a b3       	in	r25, 0x1a	; 26
     3a4:	21 e0       	ldi	r18, 0x01	; 1
     3a6:	30 e0       	ldi	r19, 0x00	; 0
     3a8:	02 c0       	rjmp	.+4      	; 0x3ae <HCSR04Init+0xc>
     3aa:	22 0f       	add	r18, r18
     3ac:	33 1f       	adc	r19, r19
     3ae:	8a 95       	dec	r24
     3b0:	e2 f7       	brpl	.-8      	; 0x3aa <HCSR04Init+0x8>
     3b2:	29 2b       	or	r18, r25
     3b4:	2a bb       	out	0x1a, r18	; 26
     3b6:	08 95       	ret

000003b8 <HCSR04Trigger>:
}

void HCSR04Trigger(char trig){ 
	US_PORT|=(1<<trig);
     3b8:	4b b3       	in	r20, 0x1b	; 27
     3ba:	21 e0       	ldi	r18, 0x01	; 1
     3bc:	30 e0       	ldi	r19, 0x00	; 0
     3be:	b9 01       	movw	r22, r18
     3c0:	02 c0       	rjmp	.+4      	; 0x3c6 <HCSR04Trigger+0xe>
     3c2:	66 0f       	add	r22, r22
     3c4:	77 1f       	adc	r23, r23
     3c6:	8a 95       	dec	r24
     3c8:	e2 f7       	brpl	.-8      	; 0x3c2 <HCSR04Trigger+0xa>
     3ca:	cb 01       	movw	r24, r22
     3cc:	46 2b       	or	r20, r22
     3ce:	4b bb       	out	0x1b, r20	; 27
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     3d0:	78 e2       	ldi	r23, 0x28	; 40
     3d2:	7a 95       	dec	r23
     3d4:	f1 f7       	brne	.-4      	; 0x3d2 <HCSR04Trigger+0x1a>
	_delay_us(15);
	US_PORT&=~(1<<trig);
     3d6:	9b b3       	in	r25, 0x1b	; 27
     3d8:	80 95       	com	r24
     3da:	89 23       	and	r24, r25
     3dc:	8b bb       	out	0x1b, r24	; 27
     3de:	08 95       	ret

000003e0 <GetPulseWidth>:
}

uint16_t GetPulseWidth(char echo){
	uint32_t i,result;
	for(i=0;i<600000;i++){
     3e0:	40 e0       	ldi	r20, 0x00	; 0
     3e2:	50 e0       	ldi	r21, 0x00	; 0
     3e4:	ba 01       	movw	r22, r20
     3e6:	0e c0       	rjmp	.+28     	; 0x404 <__EEPROM_REGION_LENGTH__+0x4>
		if(!(US_PIN & (1<<echo)))
     3e8:	29 b3       	in	r18, 0x19	; 25
     3ea:	30 e0       	ldi	r19, 0x00	; 0
     3ec:	08 2e       	mov	r0, r24
     3ee:	02 c0       	rjmp	.+4      	; 0x3f4 <GetPulseWidth+0x14>
     3f0:	35 95       	asr	r19
     3f2:	27 95       	ror	r18
     3f4:	0a 94       	dec	r0
     3f6:	e2 f7       	brpl	.-8      	; 0x3f0 <GetPulseWidth+0x10>
     3f8:	20 fd       	sbrc	r18, 0
     3fa:	0b c0       	rjmp	.+22     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
	US_PORT&=~(1<<trig);
}

uint16_t GetPulseWidth(char echo){
	uint32_t i,result;
	for(i=0;i<600000;i++){
     3fc:	4f 5f       	subi	r20, 0xFF	; 255
     3fe:	5f 4f       	sbci	r21, 0xFF	; 255
     400:	6f 4f       	sbci	r22, 0xFF	; 255
     402:	7f 4f       	sbci	r23, 0xFF	; 255
     404:	40 3c       	cpi	r20, 0xC0	; 192
     406:	27 e2       	ldi	r18, 0x27	; 39
     408:	52 07       	cpc	r21, r18
     40a:	29 e0       	ldi	r18, 0x09	; 9
     40c:	62 07       	cpc	r22, r18
     40e:	71 05       	cpc	r23, r1
     410:	58 f3       	brcs	.-42     	; 0x3e8 <GetPulseWidth+0x8>
		if(!(US_PIN & (1<<echo)))
			continue;
		else
			break;
	}
	if(i==600000)
     412:	40 3c       	cpi	r20, 0xC0	; 192
     414:	57 42       	sbci	r21, 0x27	; 39
     416:	69 40       	sbci	r22, 0x09	; 9
     418:	71 05       	cpc	r23, r1
     41a:	c1 f1       	breq	.+112    	; 0x48c <__EEPROM_REGION_LENGTH__+0x8c>
	return US_ERROR;
	TCCR1A=0X00;
     41c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B=(1<<CS11);
     41e:	92 e0       	ldi	r25, 0x02	; 2
     420:	9e bd       	out	0x2e, r25	; 46
	TCNT1=0x00;
     422:	1d bc       	out	0x2d, r1	; 45
     424:	1c bc       	out	0x2c, r1	; 44
	for(i=0;i<600000;i++){
     426:	40 e0       	ldi	r20, 0x00	; 0
     428:	50 e0       	ldi	r21, 0x00	; 0
     42a:	ba 01       	movw	r22, r20
     42c:	13 c0       	rjmp	.+38     	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
		if(US_PIN & (1<<echo)){
     42e:	29 b3       	in	r18, 0x19	; 25
     430:	30 e0       	ldi	r19, 0x00	; 0
     432:	08 2e       	mov	r0, r24
     434:	02 c0       	rjmp	.+4      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
     436:	35 95       	asr	r19
     438:	27 95       	ror	r18
     43a:	0a 94       	dec	r0
     43c:	e2 f7       	brpl	.-8      	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
     43e:	20 ff       	sbrs	r18, 0
     440:	10 c0       	rjmp	.+32     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
			if(TCNT1 > 60000) break; else continue;
     442:	2c b5       	in	r18, 0x2c	; 44
     444:	3d b5       	in	r19, 0x2d	; 45
     446:	21 36       	cpi	r18, 0x61	; 97
     448:	3a 4e       	sbci	r19, 0xEA	; 234
     44a:	58 f4       	brcc	.+22     	; 0x462 <__EEPROM_REGION_LENGTH__+0x62>
	if(i==600000)
	return US_ERROR;
	TCCR1A=0X00;
	TCCR1B=(1<<CS11);
	TCNT1=0x00;
	for(i=0;i<600000;i++){
     44c:	4f 5f       	subi	r20, 0xFF	; 255
     44e:	5f 4f       	sbci	r21, 0xFF	; 255
     450:	6f 4f       	sbci	r22, 0xFF	; 255
     452:	7f 4f       	sbci	r23, 0xFF	; 255
     454:	40 3c       	cpi	r20, 0xC0	; 192
     456:	27 e2       	ldi	r18, 0x27	; 39
     458:	52 07       	cpc	r21, r18
     45a:	29 e0       	ldi	r18, 0x09	; 9
     45c:	62 07       	cpc	r22, r18
     45e:	71 05       	cpc	r23, r1
     460:	30 f3       	brcs	.-52     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
			if(TCNT1 > 60000) break; else continue;
		}
		else
			break;
	}
	if(i==600000)
     462:	40 3c       	cpi	r20, 0xC0	; 192
     464:	57 42       	sbci	r21, 0x27	; 39
     466:	69 40       	sbci	r22, 0x09	; 9
     468:	71 05       	cpc	r23, r1
     46a:	99 f0       	breq	.+38     	; 0x492 <__EEPROM_REGION_LENGTH__+0x92>
		return US_NO_OBSTACLE;
	result=TCNT1;
     46c:	8c b5       	in	r24, 0x2c	; 44
     46e:	9d b5       	in	r25, 0x2d	; 45
     470:	a0 e0       	ldi	r26, 0x00	; 0
     472:	b0 e0       	ldi	r27, 0x00	; 0
	TCCR1B=0x00;
     474:	1e bc       	out	0x2e, r1	; 46
	if(result > 60000)
     476:	81 36       	cpi	r24, 0x61	; 97
     478:	2a ee       	ldi	r18, 0xEA	; 234
     47a:	92 07       	cpc	r25, r18
     47c:	a1 05       	cpc	r26, r1
     47e:	b1 05       	cpc	r27, r1
     480:	58 f4       	brcc	.+22     	; 0x498 <__EEPROM_REGION_LENGTH__+0x98>
	return US_NO_OBSTACLE;
	else
	return (result>>1);
     482:	b6 95       	lsr	r27
     484:	a7 95       	ror	r26
     486:	97 95       	ror	r25
     488:	87 95       	ror	r24
     48a:	08 95       	ret
			continue;
		else
			break;
	}
	if(i==600000)
	return US_ERROR;
     48c:	8f ef       	ldi	r24, 0xFF	; 255
     48e:	9f ef       	ldi	r25, 0xFF	; 255
     490:	08 95       	ret
		}
		else
			break;
	}
	if(i==600000)
		return US_NO_OBSTACLE;
     492:	8e ef       	ldi	r24, 0xFE	; 254
     494:	9f ef       	ldi	r25, 0xFF	; 255
     496:	08 95       	ret
	result=TCNT1;
	TCCR1B=0x00;
	if(result > 60000)
	return US_NO_OBSTACLE;
     498:	8e ef       	ldi	r24, 0xFE	; 254
     49a:	9f ef       	ldi	r25, 0xFF	; 255
	else
	return (result>>1);
}
     49c:	08 95       	ret

0000049e <calculateDistance>:

int calculateDistance(char trig, char echo, int distance){
     49e:	0f 93       	push	r16
     4a0:	1f 93       	push	r17
     4a2:	cf 93       	push	r28
     4a4:	df 93       	push	r29
     4a6:	c8 2f       	mov	r28, r24
     4a8:	d6 2f       	mov	r29, r22
     4aa:	8a 01       	movw	r16, r20
	int Bowldistance;
	uint16_t r;
	HCSR04Init(trig);
     4ac:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <HCSR04Init>
	HCSR04Trigger(trig);
     4b0:	8c 2f       	mov	r24, r28
     4b2:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <HCSR04Trigger>
	r=GetPulseWidth(echo);
     4b6:	8d 2f       	mov	r24, r29
     4b8:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <GetPulseWidth>
	Bowldistance=(r*0.034/2.0);
     4bc:	bc 01       	movw	r22, r24
     4be:	80 e0       	ldi	r24, 0x00	; 0
     4c0:	90 e0       	ldi	r25, 0x00	; 0
     4c2:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__floatunsisf>
     4c6:	26 e9       	ldi	r18, 0x96	; 150
     4c8:	33 e4       	ldi	r19, 0x43	; 67
     4ca:	4b e0       	ldi	r20, 0x0B	; 11
     4cc:	5d e3       	ldi	r21, 0x3D	; 61
     4ce:	0e 94 33 07 	call	0xe66	; 0xe66 <__mulsf3>
     4d2:	20 e0       	ldi	r18, 0x00	; 0
     4d4:	30 e0       	ldi	r19, 0x00	; 0
     4d6:	40 e0       	ldi	r20, 0x00	; 0
     4d8:	5f e3       	ldi	r21, 0x3F	; 63
     4da:	0e 94 33 07 	call	0xe66	; 0xe66 <__mulsf3>
     4de:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixsfsi>
	if(Bowldistance<distance){
     4e2:	60 17       	cp	r22, r16
     4e4:	71 07       	cpc	r23, r17
     4e6:	1c f4       	brge	.+6      	; 0x4ee <calculateDistance+0x50>
		return 1;
     4e8:	81 e0       	ldi	r24, 0x01	; 1
     4ea:	90 e0       	ldi	r25, 0x00	; 0
     4ec:	02 c0       	rjmp	.+4      	; 0x4f2 <calculateDistance+0x54>
		}else{
		return 0;
     4ee:	80 e0       	ldi	r24, 0x00	; 0
     4f0:	90 e0       	ldi	r25, 0x00	; 0
	}
	_delay_ms(30);
     4f2:	df 91       	pop	r29
     4f4:	cf 91       	pop	r28
     4f6:	1f 91       	pop	r17
     4f8:	0f 91       	pop	r16
     4fa:	08 95       	ret

000004fc <loadCellRead>:
uint8_t hx711H=0; //Load Scale High Bits
uint16_t hx711L=0;//Load Scale Low Bits
volatile uint16_t TimerCal=0;// variable for collect echo data
float loadCellRead(){
     4fc:	cf 92       	push	r12
     4fe:	df 92       	push	r13
     500:	ef 92       	push	r14
     502:	ff 92       	push	r15
	hx711H=0;hx711L=0;  //clear variables
     504:	10 92 62 01 	sts	0x0162, r1	; 0x800162 <hx711H>
     508:	10 92 61 01 	sts	0x0161, r1	; 0x800161 <__data_end+0x1>
     50c:	10 92 60 01 	sts	0x0160, r1	; 0x800160 <__data_end>
	for(uint8_t i=0;i<8;i++){  // Load cell data high 8 bits
     510:	80 e0       	ldi	r24, 0x00	; 0
     512:	33 c0       	rjmp	.+102    	; 0x57a <loadCellRead+0x7e>
		PORTA|=(1<<0); //Clock pin high
     514:	9b b3       	in	r25, 0x1b	; 27
     516:	91 60       	ori	r25, 0x01	; 1
     518:	9b bb       	out	0x1b, r25	; 27
     51a:	9a e1       	ldi	r25, 0x1A	; 26
     51c:	9a 95       	dec	r25
     51e:	f1 f7       	brne	.-4      	; 0x51c <loadCellRead+0x20>
     520:	00 c0       	rjmp	.+0      	; 0x522 <loadCellRead+0x26>
		_delay_us(10);
		if ((PINA&(1<<1))>>1){
     522:	c9 9b       	sbis	0x19, 1	; 25
     524:	11 c0       	rjmp	.+34     	; 0x548 <loadCellRead+0x4c>
			hx711H|=(1<<(7-i));
     526:	47 e0       	ldi	r20, 0x07	; 7
     528:	50 e0       	ldi	r21, 0x00	; 0
     52a:	48 1b       	sub	r20, r24
     52c:	51 09       	sbc	r21, r1
     52e:	21 e0       	ldi	r18, 0x01	; 1
     530:	30 e0       	ldi	r19, 0x00	; 0
     532:	02 c0       	rjmp	.+4      	; 0x538 <loadCellRead+0x3c>
     534:	22 0f       	add	r18, r18
     536:	33 1f       	adc	r19, r19
     538:	4a 95       	dec	r20
     53a:	e2 f7       	brpl	.-8      	; 0x534 <loadCellRead+0x38>
     53c:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <hx711H>
     540:	29 2b       	or	r18, r25
     542:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <hx711H>
     546:	11 c0       	rjmp	.+34     	; 0x56a <loadCellRead+0x6e>
		}
		else{
			hx711H&=~(1<<(7-i));
     548:	47 e0       	ldi	r20, 0x07	; 7
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	48 1b       	sub	r20, r24
     54e:	51 09       	sbc	r21, r1
     550:	21 e0       	ldi	r18, 0x01	; 1
     552:	30 e0       	ldi	r19, 0x00	; 0
     554:	02 c0       	rjmp	.+4      	; 0x55a <loadCellRead+0x5e>
     556:	22 0f       	add	r18, r18
     558:	33 1f       	adc	r19, r19
     55a:	4a 95       	dec	r20
     55c:	e2 f7       	brpl	.-8      	; 0x556 <loadCellRead+0x5a>
     55e:	20 95       	com	r18
     560:	90 91 62 01 	lds	r25, 0x0162	; 0x800162 <hx711H>
     564:	29 23       	and	r18, r25
     566:	20 93 62 01 	sts	0x0162, r18	; 0x800162 <hx711H>
		}
		PORTA&=~(1<<0); //Clock pin low
     56a:	9b b3       	in	r25, 0x1b	; 27
     56c:	9e 7f       	andi	r25, 0xFE	; 254
     56e:	9b bb       	out	0x1b, r25	; 27
     570:	9d e0       	ldi	r25, 0x0D	; 13
     572:	9a 95       	dec	r25
     574:	f1 f7       	brne	.-4      	; 0x572 <loadCellRead+0x76>
     576:	00 00       	nop
uint8_t hx711H=0; //Load Scale High Bits
uint16_t hx711L=0;//Load Scale Low Bits
volatile uint16_t TimerCal=0;// variable for collect echo data
float loadCellRead(){
	hx711H=0;hx711L=0;  //clear variables
	for(uint8_t i=0;i<8;i++){  // Load cell data high 8 bits
     578:	8f 5f       	subi	r24, 0xFF	; 255
     57a:	88 30       	cpi	r24, 0x08	; 8
     57c:	58 f2       	brcs	.-106    	; 0x514 <loadCellRead+0x18>
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	3e c0       	rjmp	.+124    	; 0x5fe <loadCellRead+0x102>
		_delay_us(5);
	}
	
	
	for(uint8_t i=0;i<16;i++){ // Load cell data low 16 bits
		PORTA|=(1<<0); //Clock pin high
     582:	9b b3       	in	r25, 0x1b	; 27
     584:	91 60       	ori	r25, 0x01	; 1
     586:	9b bb       	out	0x1b, r25	; 27
     588:	9a e1       	ldi	r25, 0x1A	; 26
     58a:	9a 95       	dec	r25
     58c:	f1 f7       	brne	.-4      	; 0x58a <loadCellRead+0x8e>
     58e:	00 c0       	rjmp	.+0      	; 0x590 <loadCellRead+0x94>
		_delay_us(10);
		if ((PINA&(1<<1))>>1){
     590:	c9 9b       	sbis	0x19, 1	; 25
     592:	16 c0       	rjmp	.+44     	; 0x5c0 <loadCellRead+0xc4>
			hx711L|=(1<<(15-i));
     594:	4f e0       	ldi	r20, 0x0F	; 15
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	48 1b       	sub	r20, r24
     59a:	51 09       	sbc	r21, r1
     59c:	21 e0       	ldi	r18, 0x01	; 1
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <loadCellRead+0xaa>
     5a2:	22 0f       	add	r18, r18
     5a4:	33 1f       	adc	r19, r19
     5a6:	4a 95       	dec	r20
     5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <loadCellRead+0xa6>
     5aa:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <__data_end>
     5ae:	50 91 61 01 	lds	r21, 0x0161	; 0x800161 <__data_end+0x1>
     5b2:	24 2b       	or	r18, r20
     5b4:	35 2b       	or	r19, r21
     5b6:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <__data_end+0x1>
     5ba:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <__data_end>
     5be:	17 c0       	rjmp	.+46     	; 0x5ee <loadCellRead+0xf2>
		}
		else{
			hx711L&=~(1<<(15-i));
     5c0:	4f e0       	ldi	r20, 0x0F	; 15
     5c2:	50 e0       	ldi	r21, 0x00	; 0
     5c4:	48 1b       	sub	r20, r24
     5c6:	51 09       	sbc	r21, r1
     5c8:	21 e0       	ldi	r18, 0x01	; 1
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	02 c0       	rjmp	.+4      	; 0x5d2 <loadCellRead+0xd6>
     5ce:	22 0f       	add	r18, r18
     5d0:	33 1f       	adc	r19, r19
     5d2:	4a 95       	dec	r20
     5d4:	e2 f7       	brpl	.-8      	; 0x5ce <loadCellRead+0xd2>
     5d6:	20 95       	com	r18
     5d8:	30 95       	com	r19
     5da:	40 91 60 01 	lds	r20, 0x0160	; 0x800160 <__data_end>
     5de:	50 91 61 01 	lds	r21, 0x0161	; 0x800161 <__data_end+0x1>
     5e2:	24 23       	and	r18, r20
     5e4:	35 23       	and	r19, r21
     5e6:	30 93 61 01 	sts	0x0161, r19	; 0x800161 <__data_end+0x1>
     5ea:	20 93 60 01 	sts	0x0160, r18	; 0x800160 <__data_end>
		}
		PORTA&=~(1<<0); //Clock pin low
     5ee:	9b b3       	in	r25, 0x1b	; 27
     5f0:	9e 7f       	andi	r25, 0xFE	; 254
     5f2:	9b bb       	out	0x1b, r25	; 27
     5f4:	9d e0       	ldi	r25, 0x0D	; 13
     5f6:	9a 95       	dec	r25
     5f8:	f1 f7       	brne	.-4      	; 0x5f6 <loadCellRead+0xfa>
     5fa:	00 00       	nop
		PORTA&=~(1<<0); //Clock pin low
		_delay_us(5);
	}
	
	
	for(uint8_t i=0;i<16;i++){ // Load cell data low 16 bits
     5fc:	8f 5f       	subi	r24, 0xFF	; 255
     5fe:	80 31       	cpi	r24, 0x10	; 16
     600:	08 f4       	brcc	.+2      	; 0x604 <loadCellRead+0x108>
     602:	bf cf       	rjmp	.-130    	; 0x582 <loadCellRead+0x86>
		}
		PORTA&=~(1<<0); //Clock pin low
		_delay_us(5);
	}
	
	hx711L=hx711L>>1; //shift bits
     604:	80 91 60 01 	lds	r24, 0x0160	; 0x800160 <__data_end>
     608:	90 91 61 01 	lds	r25, 0x0161	; 0x800161 <__data_end+0x1>
     60c:	96 95       	lsr	r25
     60e:	87 95       	ror	r24
     610:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x1>
     614:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
	
	if (hx711H&1){
     618:	60 91 62 01 	lds	r22, 0x0162	; 0x800162 <hx711H>
     61c:	60 ff       	sbrs	r22, 0
     61e:	05 c0       	rjmp	.+10     	; 0x62a <loadCellRead+0x12e>
		hx711L|=(1<<15);
     620:	90 68       	ori	r25, 0x80	; 128
     622:	90 93 61 01 	sts	0x0161, r25	; 0x800161 <__data_end+0x1>
     626:	80 93 60 01 	sts	0x0160, r24	; 0x800160 <__data_end>
	}
	else{
		hx711L&=~(1<<15);
	}
	hx711H=hx711H>>1;
     62a:	66 95       	lsr	r22
     62c:	60 93 62 01 	sts	0x0162, r22	; 0x800162 <hx711H>
	
	return (hx711H*(65536/18029.6))+hx711L/18029.6; //load cell calibration
     630:	70 e0       	ldi	r23, 0x00	; 0
     632:	80 e0       	ldi	r24, 0x00	; 0
     634:	90 e0       	ldi	r25, 0x00	; 0
     636:	0e 94 a7 06 	call	0xd4e	; 0xd4e <__floatsisf>
     63a:	24 e6       	ldi	r18, 0x64	; 100
     63c:	32 ea       	ldi	r19, 0xA2	; 162
     63e:	48 e6       	ldi	r20, 0x68	; 104
     640:	50 e4       	ldi	r21, 0x40	; 64
     642:	0e 94 33 07 	call	0xe66	; 0xe66 <__mulsf3>
     646:	6b 01       	movw	r12, r22
     648:	7c 01       	movw	r14, r24
     64a:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <__data_end>
     64e:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <__data_end+0x1>
     652:	80 e0       	ldi	r24, 0x00	; 0
     654:	90 e0       	ldi	r25, 0x00	; 0
     656:	0e 94 a5 06 	call	0xd4a	; 0xd4a <__floatunsisf>
     65a:	23 e3       	ldi	r18, 0x33	; 51
     65c:	3b ed       	ldi	r19, 0xDB	; 219
     65e:	4c e8       	ldi	r20, 0x8C	; 140
     660:	56 e4       	ldi	r21, 0x46	; 70
     662:	0e 94 fd 05 	call	0xbfa	; 0xbfa <__divsf3>
     666:	9b 01       	movw	r18, r22
     668:	ac 01       	movw	r20, r24
     66a:	c7 01       	movw	r24, r14
     66c:	b6 01       	movw	r22, r12
     66e:	0e 94 91 05 	call	0xb22	; 0xb22 <__addsf3>
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	08 95       	ret

0000067c <PWM_init>:
void PWM_init()
{
	/*set fast PWM mode with non-inverted output*/
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS00);
     67c:	89 e6       	ldi	r24, 0x69	; 105
     67e:	83 bf       	out	0x33, r24	; 51
	DDRB|=(1<<PB3);  /*set OC0 pin as output*/
     680:	87 b3       	in	r24, 0x17	; 23
     682:	88 60       	ori	r24, 0x08	; 8
     684:	87 bb       	out	0x17, r24	; 23
     686:	08 95       	ret

00000688 <servo1ninety>:
void servo2zero(void);

void servo1ninety(void)
{
	
	PORTD = 0x20;
     688:	80 e2       	ldi	r24, 0x20	; 32
     68a:	82 bb       	out	0x12, r24	; 18
	while(1)
	{
		//Rotate Motor to 0 degree
		PORTD = 0x20;
     68c:	82 bb       	out	0x12, r24	; 18
     68e:	ef ec       	ldi	r30, 0xCF	; 207
     690:	f7 e0       	ldi	r31, 0x07	; 7
     692:	31 97       	sbiw	r30, 0x01	; 1
     694:	f1 f7       	brne	.-4      	; 0x692 <servo1ninety+0xa>
     696:	00 c0       	rjmp	.+0      	; 0x698 <servo1ninety+0x10>
     698:	00 00       	nop
		_delay_us(1000);
		PORTD = 0x00;
     69a:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     69c:	ff ef       	ldi	r31, 0xFF	; 255
     69e:	23 ed       	ldi	r18, 0xD3	; 211
     6a0:	30 e3       	ldi	r19, 0x30	; 48
     6a2:	f1 50       	subi	r31, 0x01	; 1
     6a4:	20 40       	sbci	r18, 0x00	; 0
     6a6:	30 40       	sbci	r19, 0x00	; 0
     6a8:	e1 f7       	brne	.-8      	; 0x6a2 <servo1ninety+0x1a>
     6aa:	00 c0       	rjmp	.+0      	; 0x6ac <servo1ninety+0x24>
     6ac:	00 00       	nop
		
		_delay_ms(2000);
		
		//Rotate Motor to 90 degree
		PORTD = 0x20;
     6ae:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6b0:	87 eb       	ldi	r24, 0xB7	; 183
     6b2:	9b e0       	ldi	r25, 0x0B	; 11
     6b4:	01 97       	sbiw	r24, 0x01	; 1
     6b6:	f1 f7       	brne	.-4      	; 0x6b4 <servo1ninety+0x2c>
     6b8:	00 c0       	rjmp	.+0      	; 0x6ba <servo1ninety+0x32>
     6ba:	00 00       	nop
		_delay_us(1500);
		PORTD = 0x00;
     6bc:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6be:	9f ef       	ldi	r25, 0xFF	; 255
     6c0:	e3 ed       	ldi	r30, 0xD3	; 211
     6c2:	f0 e3       	ldi	r31, 0x30	; 48
     6c4:	91 50       	subi	r25, 0x01	; 1
     6c6:	e0 40       	sbci	r30, 0x00	; 0
     6c8:	f0 40       	sbci	r31, 0x00	; 0
     6ca:	e1 f7       	brne	.-8      	; 0x6c4 <servo1ninety+0x3c>
     6cc:	00 c0       	rjmp	.+0      	; 0x6ce <servo1ninety+0x46>
     6ce:	00 00       	nop
     6d0:	08 95       	ret

000006d2 <servo1zero>:
}

void servo1zero(void)
{
	
	PORTD = 0x20;
     6d2:	80 e2       	ldi	r24, 0x20	; 32
     6d4:	82 bb       	out	0x12, r24	; 18
	while(1)
	{
		//Rotate Motor to 0 degree
		PORTD = 0x20;
     6d6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6d8:	8f ec       	ldi	r24, 0xCF	; 207
     6da:	97 e0       	ldi	r25, 0x07	; 7
     6dc:	01 97       	sbiw	r24, 0x01	; 1
     6de:	f1 f7       	brne	.-4      	; 0x6dc <servo1zero+0xa>
     6e0:	00 c0       	rjmp	.+0      	; 0x6e2 <servo1zero+0x10>
     6e2:	00 00       	nop
		_delay_us(1000);
		PORTD = 0x00;
     6e4:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     6e6:	9f ef       	ldi	r25, 0xFF	; 255
     6e8:	23 ed       	ldi	r18, 0xD3	; 211
     6ea:	80 e3       	ldi	r24, 0x30	; 48
     6ec:	91 50       	subi	r25, 0x01	; 1
     6ee:	20 40       	sbci	r18, 0x00	; 0
     6f0:	80 40       	sbci	r24, 0x00	; 0
     6f2:	e1 f7       	brne	.-8      	; 0x6ec <servo1zero+0x1a>
     6f4:	00 c0       	rjmp	.+0      	; 0x6f6 <servo1zero+0x24>
     6f6:	00 00       	nop
     6f8:	08 95       	ret

000006fa <servo2ninety>:


void servo2ninety(void)
{
	
	PORTD = 0x10;
     6fa:	80 e1       	ldi	r24, 0x10	; 16
     6fc:	82 bb       	out	0x12, r24	; 18
	while(1)
	{
		//Rotate Motor to 0 degree
		PORTD = 0x10;
     6fe:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     700:	ef ec       	ldi	r30, 0xCF	; 207
     702:	f7 e0       	ldi	r31, 0x07	; 7
     704:	31 97       	sbiw	r30, 0x01	; 1
     706:	f1 f7       	brne	.-4      	; 0x704 <servo2ninety+0xa>
     708:	00 c0       	rjmp	.+0      	; 0x70a <servo2ninety+0x10>
     70a:	00 00       	nop
		_delay_us(1000);
		PORTD = 0x00;
     70c:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     70e:	ff ef       	ldi	r31, 0xFF	; 255
     710:	23 ed       	ldi	r18, 0xD3	; 211
     712:	30 e3       	ldi	r19, 0x30	; 48
     714:	f1 50       	subi	r31, 0x01	; 1
     716:	20 40       	sbci	r18, 0x00	; 0
     718:	30 40       	sbci	r19, 0x00	; 0
     71a:	e1 f7       	brne	.-8      	; 0x714 <servo2ninety+0x1a>
     71c:	00 c0       	rjmp	.+0      	; 0x71e <servo2ninety+0x24>
     71e:	00 00       	nop
		
		_delay_ms(2000);
		
		//Rotate Motor to 90 degree
		PORTD = 0x10;
     720:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     722:	87 eb       	ldi	r24, 0xB7	; 183
     724:	9b e0       	ldi	r25, 0x0B	; 11
     726:	01 97       	sbiw	r24, 0x01	; 1
     728:	f1 f7       	brne	.-4      	; 0x726 <servo2ninety+0x2c>
     72a:	00 c0       	rjmp	.+0      	; 0x72c <servo2ninety+0x32>
     72c:	00 00       	nop
		_delay_us(1500);
		PORTD = 0x00;
     72e:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     730:	9f ef       	ldi	r25, 0xFF	; 255
     732:	e3 ed       	ldi	r30, 0xD3	; 211
     734:	f0 e3       	ldi	r31, 0x30	; 48
     736:	91 50       	subi	r25, 0x01	; 1
     738:	e0 40       	sbci	r30, 0x00	; 0
     73a:	f0 40       	sbci	r31, 0x00	; 0
     73c:	e1 f7       	brne	.-8      	; 0x736 <servo2ninety+0x3c>
     73e:	00 c0       	rjmp	.+0      	; 0x740 <servo2ninety+0x46>
     740:	00 00       	nop
     742:	08 95       	ret

00000744 <servo2zero>:
}

void servo2zero(void)
{
	
	PORTD = 0x10;
     744:	80 e1       	ldi	r24, 0x10	; 16
     746:	82 bb       	out	0x12, r24	; 18
	while(1)
	{
		//Rotate Motor to 0 degree
		PORTD = 0x10;
     748:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     74a:	8f ec       	ldi	r24, 0xCF	; 207
     74c:	97 e0       	ldi	r25, 0x07	; 7
     74e:	01 97       	sbiw	r24, 0x01	; 1
     750:	f1 f7       	brne	.-4      	; 0x74e <servo2zero+0xa>
     752:	00 c0       	rjmp	.+0      	; 0x754 <servo2zero+0x10>
     754:	00 00       	nop
		_delay_us(1000);
		PORTD = 0x00;
     756:	12 ba       	out	0x12, r1	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     758:	9f ef       	ldi	r25, 0xFF	; 255
     75a:	23 ed       	ldi	r18, 0xD3	; 211
     75c:	80 e3       	ldi	r24, 0x30	; 48
     75e:	91 50       	subi	r25, 0x01	; 1
     760:	20 40       	sbci	r18, 0x00	; 0
     762:	80 40       	sbci	r24, 0x00	; 0
     764:	e1 f7       	brne	.-8      	; 0x75e <servo2zero+0x1a>
     766:	00 c0       	rjmp	.+0      	; 0x768 <servo2zero+0x24>
     768:	00 00       	nop
     76a:	08 95       	ret

0000076c <prepareMeal>:
			}
		}
    }
}

void prepareMeal(int weight){
     76c:	ef 92       	push	r14
     76e:	ff 92       	push	r15
     770:	0f 93       	push	r16
     772:	1f 93       	push	r17
     774:	cf 93       	push	r28
     776:	df 93       	push	r29
     778:	cd b7       	in	r28, 0x3d	; 61
     77a:	de b7       	in	r29, 0x3e	; 62
     77c:	64 97       	sbiw	r28, 0x14	; 20
     77e:	0f b6       	in	r0, 0x3f	; 63
     780:	f8 94       	cli
     782:	de bf       	out	0x3e, r29	; 62
     784:	0f be       	out	0x3f, r0	; 63
     786:	cd bf       	out	0x3d, r28	; 61
     788:	8c 01       	movw	r16, r24
	
	//weight can be 50g(key 3) 80g(key 4)
	LCD_Clear();
     78a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
	LCD_String("Place the Bowl");
     78e:	8c e6       	ldi	r24, 0x6C	; 108
     790:	90 e0       	ldi	r25, 0x00	; 0
     792:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     796:	2f ef       	ldi	r18, 0xFF	; 255
     798:	30 e7       	ldi	r19, 0x70	; 112
     79a:	42 e0       	ldi	r20, 0x02	; 2
     79c:	21 50       	subi	r18, 0x01	; 1
     79e:	30 40       	sbci	r19, 0x00	; 0
     7a0:	40 40       	sbci	r20, 0x00	; 0
     7a2:	e1 f7       	brne	.-8      	; 0x79c <prepareMeal+0x30>
     7a4:	00 c0       	rjmp	.+0      	; 0x7a6 <prepareMeal+0x3a>
     7a6:	00 00       	nop
	_delay_ms(100);
	int BowlFlag=calculateDistance(PA3,PA5,10);//20 in proteus
     7a8:	4a e0       	ldi	r20, 0x0A	; 10
     7aa:	50 e0       	ldi	r21, 0x00	; 0
     7ac:	65 e0       	ldi	r22, 0x05	; 5
     7ae:	83 e0       	ldi	r24, 0x03	; 3
     7b0:	0e 94 4f 02 	call	0x49e	; 0x49e <calculateDistance>
	if(BowlFlag==1){
     7b4:	01 97       	sbiw	r24, 0x01	; 1
     7b6:	09 f0       	breq	.+2      	; 0x7ba <prepareMeal+0x4e>
     7b8:	bb c0       	rjmp	.+374    	; 0x930 <__stack+0xd1>
		LCD_Clear();
     7ba:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
		LCD_String("Press cook(2)");
     7be:	8b e7       	ldi	r24, 0x7B	; 123
     7c0:	90 e0       	ldi	r25, 0x00	; 0
     7c2:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     7c6:	8f ef       	ldi	r24, 0xFF	; 255
     7c8:	99 e6       	ldi	r25, 0x69	; 105
     7ca:	28 e1       	ldi	r18, 0x18	; 24
     7cc:	81 50       	subi	r24, 0x01	; 1
     7ce:	90 40       	sbci	r25, 0x00	; 0
     7d0:	20 40       	sbci	r18, 0x00	; 0
     7d2:	e1 f7       	brne	.-8      	; 0x7cc <prepareMeal+0x60>
     7d4:	00 c0       	rjmp	.+0      	; 0x7d6 <prepareMeal+0x6a>
     7d6:	00 00       	nop
		_delay_ms(1000);
		int key1=keyfind();
     7d8:	0e 94 f6 00 	call	0x1ec	; 0x1ec <keyfind>
		if(key1==2){
     7dc:	82 30       	cpi	r24, 0x02	; 2
     7de:	09 f0       	breq	.+2      	; 0x7e2 <prepareMeal+0x76>
     7e0:	b6 c0       	rjmp	.+364    	; 0x94e <__stack+0xef>
			LCD_Clear();
     7e2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			LCD_String("Preparing");
     7e6:	89 e8       	ldi	r24, 0x89	; 137
     7e8:	90 e0       	ldi	r25, 0x00	; 0
     7ea:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     7ee:	3f ef       	ldi	r19, 0xFF	; 255
     7f0:	49 e6       	ldi	r20, 0x69	; 105
     7f2:	88 e1       	ldi	r24, 0x18	; 24
     7f4:	31 50       	subi	r19, 0x01	; 1
     7f6:	40 40       	sbci	r20, 0x00	; 0
     7f8:	80 40       	sbci	r24, 0x00	; 0
     7fa:	e1 f7       	brne	.-8      	; 0x7f4 <prepareMeal+0x88>
     7fc:	00 c0       	rjmp	.+0      	; 0x7fe <prepareMeal+0x92>
     7fe:	00 00       	nop
			_delay_ms(1000);
			LCD_Clear();
     800:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			servo1ninety();//servo top lid
     804:	0e 94 44 03 	call	0x688	; 0x688 <servo1ninety>
			char lcddata[20];
			int hx=0;
     808:	e1 2c       	mov	r14, r1
     80a:	f1 2c       	mov	r15, r1
			while(hx<=weight){
     80c:	2b c0       	rjmp	.+86     	; 0x864 <__stack+0x5>
				DDRA|=(1<<0);		//Load cell clock pin
     80e:	8a b3       	in	r24, 0x1a	; 26
     810:	81 60       	ori	r24, 0x01	; 1
     812:	8a bb       	out	0x1a, r24	; 26
				PORTA&=~(1<<0);		//Clock pin low
     814:	8b b3       	in	r24, 0x1b	; 27
     816:	8e 7f       	andi	r24, 0xFE	; 254
     818:	8b bb       	out	0x1b, r24	; 27
				hx=loadCellRead();		//inserting load cell calibration function
     81a:	0e 94 7e 02 	call	0x4fc	; 0x4fc <loadCellRead>
     81e:	0e 94 6f 06 	call	0xcde	; 0xcde <__fixsfsi>
     822:	dc 01       	movw	r26, r24
     824:	cb 01       	movw	r24, r22
     826:	7c 01       	movw	r14, r24
     828:	2f ef       	ldi	r18, 0xFF	; 255
     82a:	30 e7       	ldi	r19, 0x70	; 112
     82c:	42 e0       	ldi	r20, 0x02	; 2
     82e:	21 50       	subi	r18, 0x01	; 1
     830:	30 40       	sbci	r19, 0x00	; 0
     832:	40 40       	sbci	r20, 0x00	; 0
     834:	e1 f7       	brne	.-8      	; 0x82e <__DATA_REGION_LENGTH__+0x2e>
     836:	00 c0       	rjmp	.+0      	; 0x838 <__DATA_REGION_LENGTH__+0x38>
     838:	00 00       	nop
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
     83a:	4a e0       	ldi	r20, 0x0A	; 10
     83c:	be 01       	movw	r22, r28
     83e:	6f 5f       	subi	r22, 0xFF	; 255
     840:	7f 4f       	sbci	r23, 0xFF	; 255
     842:	0e 94 cb 07 	call	0xf96	; 0xf96 <__itoa_ncheck>
				_delay_ms(100);
				itoa(hx,lcddata,10);		//convert int to string
				LCD_String(lcddata);		//data to be displayed on lcd
     846:	ce 01       	movw	r24, r28
     848:	01 96       	adiw	r24, 0x01	; 1
     84a:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     84e:	8f ef       	ldi	r24, 0xFF	; 255
     850:	99 e6       	ldi	r25, 0x69	; 105
     852:	28 e1       	ldi	r18, 0x18	; 24
     854:	81 50       	subi	r24, 0x01	; 1
     856:	90 40       	sbci	r25, 0x00	; 0
     858:	20 40       	sbci	r18, 0x00	; 0
     85a:	e1 f7       	brne	.-8      	; 0x854 <__DATA_REGION_LENGTH__+0x54>
     85c:	00 c0       	rjmp	.+0      	; 0x85e <__DATA_REGION_LENGTH__+0x5e>
     85e:	00 00       	nop
				_delay_ms(1000);
				LCD_Clear();
     860:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			_delay_ms(1000);
			LCD_Clear();
			servo1ninety();//servo top lid
			char lcddata[20];
			int hx=0;
			while(hx<=weight){
     864:	0e 15       	cp	r16, r14
     866:	1f 05       	cpc	r17, r15
     868:	94 f6       	brge	.-92     	; 0x80e <__DATA_REGION_LENGTH__+0xe>
				itoa(hx,lcddata,10);		//convert int to string
				LCD_String(lcddata);		//data to be displayed on lcd
				_delay_ms(1000);
				LCD_Clear();
				};
			LCD_String("Limit exceeded");
     86a:	83 e9       	ldi	r24, 0x93	; 147
     86c:	90 e0       	ldi	r25, 0x00	; 0
     86e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
			servo1zero();//close servo top lid
     872:	0e 94 69 03 	call	0x6d2	; 0x6d2 <servo1zero>
     876:	8f e1       	ldi	r24, 0x1F	; 31
     878:	9e e4       	ldi	r25, 0x4E	; 78
     87a:	01 97       	sbiw	r24, 0x01	; 1
     87c:	f1 f7       	brne	.-4      	; 0x87a <__stack+0x1b>
     87e:	00 c0       	rjmp	.+0      	; 0x880 <__stack+0x21>
     880:	00 00       	nop
			_delay_ms(10);
			servo2ninety();//servo bottom lid open
     882:	0e 94 7d 03 	call	0x6fa	; 0x6fa <servo2ninety>
     886:	8f e3       	ldi	r24, 0x3F	; 63
     888:	9c e9       	ldi	r25, 0x9C	; 156
     88a:	01 97       	sbiw	r24, 0x01	; 1
     88c:	f1 f7       	brne	.-4      	; 0x88a <__stack+0x2b>
     88e:	00 c0       	rjmp	.+0      	; 0x890 <__stack+0x31>
     890:	00 00       	nop
			_delay_ms(20);
			servo2zero();//servo bottom close
     892:	0e 94 a2 03 	call	0x744	; 0x744 <servo2zero>
			LCD_Clear();
     896:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			LCD_String("Moving Belt");
     89a:	82 ea       	ldi	r24, 0xA2	; 162
     89c:	90 e0       	ldi	r25, 0x00	; 0
     89e:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
			portHigh(PORTD,6);
     8a2:	82 b3       	in	r24, 0x12	; 18
     8a4:	80 64       	ori	r24, 0x40	; 64
     8a6:	82 bb       	out	0x12, r24	; 18
     8a8:	8f e0       	ldi	r24, 0x0F	; 15
     8aa:	97 e2       	ldi	r25, 0x27	; 39
     8ac:	01 97       	sbiw	r24, 0x01	; 1
     8ae:	f1 f7       	brne	.-4      	; 0x8ac <__stack+0x4d>
     8b0:	00 c0       	rjmp	.+0      	; 0x8b2 <__stack+0x53>
     8b2:	00 00       	nop
			_delay_ms(5);
			PORTD = 0x00;
     8b4:	12 ba       	out	0x12, r1	; 18
     8b6:	9f ef       	ldi	r25, 0xFF	; 255
     8b8:	21 e1       	ldi	r18, 0x11	; 17
     8ba:	3a e7       	ldi	r19, 0x7A	; 122
     8bc:	91 50       	subi	r25, 0x01	; 1
     8be:	20 40       	sbci	r18, 0x00	; 0
     8c0:	30 40       	sbci	r19, 0x00	; 0
     8c2:	e1 f7       	brne	.-8      	; 0x8bc <__stack+0x5d>
     8c4:	00 c0       	rjmp	.+0      	; 0x8c6 <__stack+0x67>
     8c6:	00 00       	nop
			_delay_ms(5000);
			LCD_Clear();
     8c8:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			LCD_String("Flowing Milk");
     8cc:	8e ea       	ldi	r24, 0xAE	; 174
     8ce:	90 e0       	ldi	r25, 0x00	; 0
     8d0:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
			portHigh(PORTD,7);
     8d4:	82 b3       	in	r24, 0x12	; 18
     8d6:	80 68       	ori	r24, 0x80	; 128
     8d8:	82 bb       	out	0x12, r24	; 18
     8da:	8f e1       	ldi	r24, 0x1F	; 31
     8dc:	9e e4       	ldi	r25, 0x4E	; 78
     8de:	01 97       	sbiw	r24, 0x01	; 1
     8e0:	f1 f7       	brne	.-4      	; 0x8de <__stack+0x7f>
     8e2:	00 c0       	rjmp	.+0      	; 0x8e4 <__stack+0x85>
     8e4:	00 00       	nop
			_delay_ms(10);
			PORTD =0x00;
     8e6:	12 ba       	out	0x12, r1	; 18
     8e8:	9f ef       	ldi	r25, 0xFF	; 255
     8ea:	2c e2       	ldi	r18, 0x2C	; 44
     8ec:	31 e3       	ldi	r19, 0x31	; 49
     8ee:	41 e0       	ldi	r20, 0x01	; 1
     8f0:	91 50       	subi	r25, 0x01	; 1
     8f2:	20 40       	sbci	r18, 0x00	; 0
     8f4:	30 40       	sbci	r19, 0x00	; 0
     8f6:	40 40       	sbci	r20, 0x00	; 0
     8f8:	d9 f7       	brne	.-10     	; 0x8f0 <__stack+0x91>
     8fa:	00 c0       	rjmp	.+0      	; 0x8fc <__stack+0x9d>
     8fc:	00 00       	nop
			_delay_ms(15000);
			LCD_Clear();
     8fe:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			
			
			LCD_String("Cornflakes");
     902:	8b eb       	ldi	r24, 0xBB	; 187
     904:	90 e0       	ldi	r25, 0x00	; 0
     906:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
			LCD_Command(0XC0);
     90a:	80 ec       	ldi	r24, 0xC0	; 192
     90c:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
			LCD_String("Ready");
     910:	86 ec       	ldi	r24, 0xC6	; 198
     912:	90 e0       	ldi	r25, 0x00	; 0
     914:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     918:	8f ef       	ldi	r24, 0xFF	; 255
     91a:	93 e2       	ldi	r25, 0x23	; 35
     91c:	24 ef       	ldi	r18, 0xF4	; 244
     91e:	81 50       	subi	r24, 0x01	; 1
     920:	90 40       	sbci	r25, 0x00	; 0
     922:	20 40       	sbci	r18, 0x00	; 0
     924:	e1 f7       	brne	.-8      	; 0x91e <__stack+0xbf>
     926:	00 c0       	rjmp	.+0      	; 0x928 <__stack+0xc9>
     928:	00 00       	nop
			_delay_ms(10000);
			LCD_Clear();
     92a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
     92e:	0f c0       	rjmp	.+30     	; 0x94e <__stack+0xef>
			
		}
		
		
	}else{
		LCD_Clear();
     930:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
		LCD_String("Place Bowl");
     934:	8c ec       	ldi	r24, 0xCC	; 204
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     93c:	3f ef       	ldi	r19, 0xFF	; 255
     93e:	43 ed       	ldi	r20, 0xD3	; 211
     940:	80 e3       	ldi	r24, 0x30	; 48
     942:	31 50       	subi	r19, 0x01	; 1
     944:	40 40       	sbci	r20, 0x00	; 0
     946:	80 40       	sbci	r24, 0x00	; 0
     948:	e1 f7       	brne	.-8      	; 0x942 <__stack+0xe3>
     94a:	00 c0       	rjmp	.+0      	; 0x94c <__stack+0xed>
     94c:	00 00       	nop
		_delay_ms(2000);
	}
}
     94e:	64 96       	adiw	r28, 0x14	; 20
     950:	0f b6       	in	r0, 0x3f	; 63
     952:	f8 94       	cli
     954:	de bf       	out	0x3e, r29	; 62
     956:	0f be       	out	0x3f, r0	; 63
     958:	cd bf       	out	0x3d, r28	; 61
     95a:	df 91       	pop	r29
     95c:	cf 91       	pop	r28
     95e:	1f 91       	pop	r17
     960:	0f 91       	pop	r16
     962:	ff 90       	pop	r15
     964:	ef 90       	pop	r14
     966:	08 95       	ret

00000968 <main>:
#define F_CPU 8000000UL
#include "headerfiles.h"
void prepareMeal(int);
int main(void){
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	cd b7       	in	r28, 0x3d	; 61
     96e:	de b7       	in	r29, 0x3e	; 62
     970:	2c 97       	sbiw	r28, 0x0c	; 12
     972:	0f b6       	in	r0, 0x3f	; 63
     974:	f8 94       	cli
     976:	de bf       	out	0x3e, r29	; 62
     978:	0f be       	out	0x3f, r0	; 63
     97a:	cd bf       	out	0x3d, r28	; 61
	DDRD=0xF4;
     97c:	84 ef       	ldi	r24, 0xF4	; 244
     97e:	81 bb       	out	0x11, r24	; 17
	LCD_Init();_delay_ms(50);
     980:	0e 94 af 00 	call	0x15e	; 0x15e <LCD_Init>
     984:	2f e7       	ldi	r18, 0x7F	; 127
     986:	88 e3       	ldi	r24, 0x38	; 56
     988:	91 e0       	ldi	r25, 0x01	; 1
     98a:	21 50       	subi	r18, 0x01	; 1
     98c:	80 40       	sbci	r24, 0x00	; 0
     98e:	90 40       	sbci	r25, 0x00	; 0
     990:	e1 f7       	brne	.-8      	; 0x98a <main+0x22>
     992:	00 c0       	rjmp	.+0      	; 0x994 <main+0x2c>
     994:	00 00       	nop
	ADC_Init();
     996:	0e 94 84 01 	call	0x308	; 0x308 <ADC_Init>
	PWM_init();
     99a:	0e 94 3e 03 	call	0x67c	; 0x67c <PWM_init>
	USART_init(9600);
     99e:	60 e8       	ldi	r22, 0x80	; 128
     9a0:	75 e2       	ldi	r23, 0x25	; 37
     9a2:	80 e0       	ldi	r24, 0x00	; 0
     9a4:	90 e0       	ldi	r25, 0x00	; 0
     9a6:	0e 94 9f 01 	call	0x33e	; 0x33e <USART_init>
	char RFID[12]="/0"; memset(RFID,0,15);
     9aa:	8f e2       	ldi	r24, 0x2F	; 47
     9ac:	90 e3       	ldi	r25, 0x30	; 48
     9ae:	9a 83       	std	Y+2, r25	; 0x02
     9b0:	89 83       	std	Y+1, r24	; 0x01
     9b2:	1c 82       	std	Y+4, r1	; 0x04
     9b4:	1b 82       	std	Y+3, r1	; 0x03
     9b6:	fe 01       	movw	r30, r28
     9b8:	35 96       	adiw	r30, 0x05	; 5
     9ba:	88 e0       	ldi	r24, 0x08	; 8
     9bc:	df 01       	movw	r26, r30
     9be:	1d 92       	st	X+, r1
     9c0:	8a 95       	dec	r24
     9c2:	e9 f7       	brne	.-6      	; 0x9be <main+0x56>
     9c4:	34 97       	sbiw	r30, 0x04	; 4
     9c6:	8f e0       	ldi	r24, 0x0F	; 15
     9c8:	df 01       	movw	r26, r30
     9ca:	1d 92       	st	X+, r1
     9cc:	8a 95       	dec	r24
     9ce:	e9 f7       	brne	.-6      	; 0x9ca <main+0x62>
	LCD_Clear(); LCD_String("Welcome");LCD_Command(0xC0); LCD_String("Press Start");
     9d0:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
     9d4:	87 ed       	ldi	r24, 0xD7	; 215
     9d6:	90 e0       	ldi	r25, 0x00	; 0
     9d8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     9dc:	80 ec       	ldi	r24, 0xC0	; 192
     9de:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
     9e2:	8f ed       	ldi	r24, 0xDF	; 223
     9e4:	90 e0       	ldi	r25, 0x00	; 0
     9e6:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     9ea:	bf ef       	ldi	r27, 0xFF	; 255
     9ec:	23 ed       	ldi	r18, 0xD3	; 211
     9ee:	80 e3       	ldi	r24, 0x30	; 48
     9f0:	b1 50       	subi	r27, 0x01	; 1
     9f2:	20 40       	sbci	r18, 0x00	; 0
     9f4:	80 40       	sbci	r24, 0x00	; 0
     9f6:	e1 f7       	brne	.-8      	; 0x9f0 <main+0x88>
     9f8:	00 c0       	rjmp	.+0      	; 0x9fa <main+0x92>
     9fa:	00 00       	nop
	_delay_ms(2000);
	
	start:
    while (1){
		//read milk level
		int MilkFlag=calculateDistance(PA6,PA7,12);//24 in proteus
     9fc:	4c e0       	ldi	r20, 0x0C	; 12
     9fe:	50 e0       	ldi	r21, 0x00	; 0
     a00:	67 e0       	ldi	r22, 0x07	; 7
     a02:	86 e0       	ldi	r24, 0x06	; 6
     a04:	0e 94 4f 02 	call	0x49e	; 0x49e <calculateDistance>
		if(MilkFlag != 1){
     a08:	01 97       	sbiw	r24, 0x01	; 1
     a0a:	39 f0       	breq	.+14     	; 0xa1a <main+0xb2>
			LCD_Clear();
     a0c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			LCD_String("Low milk level");
     a10:	8b ee       	ldi	r24, 0xEB	; 235
     a12:	90 e0       	ldi	r25, 0x00	; 0
     a14:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     a18:	ff cf       	rjmp	.-2      	; 0xa18 <main+0xb0>
			while(1){}
		}else{
			//read temperature and turn on heater
			LCD_Clear();
     a1a:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			while((ADC_Read(2)/2)<=65){
     a1e:	18 c0       	rjmp	.+48     	; 0xa50 <main+0xe8>
				LCD_String("Milk Heating");
     a20:	8a ef       	ldi	r24, 0xFA	; 250
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				LCD_Command(0xC0);
     a28:	80 ec       	ldi	r24, 0xC0	; 192
     a2a:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("in Process");
     a2e:	87 e0       	ldi	r24, 0x07	; 7
     a30:	91 e0       	ldi	r25, 0x01	; 1
     a32:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     a36:	9f ef       	ldi	r25, 0xFF	; 255
     a38:	a4 e3       	ldi	r26, 0x34	; 52
     a3a:	bc e0       	ldi	r27, 0x0C	; 12
     a3c:	91 50       	subi	r25, 0x01	; 1
     a3e:	a0 40       	sbci	r26, 0x00	; 0
     a40:	b0 40       	sbci	r27, 0x00	; 0
     a42:	e1 f7       	brne	.-8      	; 0xa3c <main+0xd4>
     a44:	00 c0       	rjmp	.+0      	; 0xa46 <main+0xde>
     a46:	00 00       	nop
				_delay_ms(500);
				LCD_Clear();
     a48:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
				PORTD=0x04;
     a4c:	84 e0       	ldi	r24, 0x04	; 4
     a4e:	82 bb       	out	0x12, r24	; 18
			LCD_String("Low milk level");
			while(1){}
		}else{
			//read temperature and turn on heater
			LCD_Clear();
			while((ADC_Read(2)/2)<=65){
     a50:	82 e0       	ldi	r24, 0x02	; 2
     a52:	0e 94 8a 01 	call	0x314	; 0x314 <ADC_Read>
     a56:	84 38       	cpi	r24, 0x84	; 132
     a58:	91 05       	cpc	r25, r1
     a5a:	14 f3       	brlt	.-60     	; 0xa20 <main+0xb8>
				LCD_String("in Process");
				_delay_ms(500);
				LCD_Clear();
				PORTD=0x04;
			}
			PORTD = 0x00;
     a5c:	12 ba       	out	0x12, r1	; 18
		}
		LCD_String("Press Start");
     a5e:	8f ed       	ldi	r24, 0xDF	; 223
     a60:	90 e0       	ldi	r25, 0x00	; 0
     a62:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
		//start button 1
		int keyStart =keyfind();
     a66:	0e 94 f6 00 	call	0x1ec	; 0x1ec <keyfind>
     a6a:	18 2f       	mov	r17, r24
		LCD_Clear();
     a6c:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
		if(keyStart==1){
     a70:	11 30       	cpi	r17, 0x01	; 1
     a72:	21 f6       	brne	.-120    	; 0x9fc <main+0x94>
			LCD_Clear();
     a74:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			LCD_String("Show RFID tag");
     a78:	82 e1       	ldi	r24, 0x12	; 18
     a7a:	91 e0       	ldi	r25, 0x01	; 1
     a7c:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
			for (int i=0;i<12;i++){ //read rfid chars
     a80:	00 e0       	ldi	r16, 0x00	; 0
     a82:	10 e0       	ldi	r17, 0x00	; 0
     a84:	0b c0       	rjmp	.+22     	; 0xa9c <main+0x134>
				RFID[i]=USART_rxc();
     a86:	0e 94 cd 01 	call	0x39a	; 0x39a <USART_rxc>
     a8a:	e1 e0       	ldi	r30, 0x01	; 1
     a8c:	f0 e0       	ldi	r31, 0x00	; 0
     a8e:	ec 0f       	add	r30, r28
     a90:	fd 1f       	adc	r31, r29
     a92:	e0 0f       	add	r30, r16
     a94:	f1 1f       	adc	r31, r17
     a96:	80 83       	st	Z, r24
		int keyStart =keyfind();
		LCD_Clear();
		if(keyStart==1){
			LCD_Clear();
			LCD_String("Show RFID tag");
			for (int i=0;i<12;i++){ //read rfid chars
     a98:	0f 5f       	subi	r16, 0xFF	; 255
     a9a:	1f 4f       	sbci	r17, 0xFF	; 255
     a9c:	0c 30       	cpi	r16, 0x0C	; 12
     a9e:	11 05       	cpc	r17, r1
     aa0:	94 f3       	brlt	.-28     	; 0xa86 <main+0x11e>
				RFID[i]=USART_rxc();
			}
			LCD_Clear();
     aa2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
			if(strcmp(RFID,"123456789012")==0){//if registered user
     aa6:	60 e2       	ldi	r22, 0x20	; 32
     aa8:	71 e0       	ldi	r23, 0x01	; 1
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	0e 94 c2 07 	call	0xf84	; 0xf84 <strcmp>
     ab2:	89 2b       	or	r24, r25
     ab4:	f1 f4       	brne	.+60     	; 0xaf2 <main+0x18a>
				LCD_String("Select The Size");
     ab6:	8d e2       	ldi	r24, 0x2D	; 45
     ab8:	91 e0       	ldi	r25, 0x01	; 1
     aba:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				LCD_Command(0xC0);
     abe:	80 ec       	ldi	r24, 0xC0	; 192
     ac0:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("3: Small 4:Large");
     ac4:	8d e3       	ldi	r24, 0x3D	; 61
     ac6:	91 e0       	ldi	r25, 0x01	; 1
     ac8:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				int key=keyfind();
     acc:	0e 94 f6 00 	call	0x1ec	; 0x1ec <keyfind>
     ad0:	90 e0       	ldi	r25, 0x00	; 0

				if(key==3){
     ad2:	83 30       	cpi	r24, 0x03	; 3
     ad4:	91 05       	cpc	r25, r1
     ad6:	29 f4       	brne	.+10     	; 0xae2 <main+0x17a>
					prepareMeal(50);
     ad8:	82 e3       	ldi	r24, 0x32	; 50
     ada:	90 e0       	ldi	r25, 0x00	; 0
     adc:	0e 94 b6 03 	call	0x76c	; 0x76c <prepareMeal>
     ae0:	8d cf       	rjmp	.-230    	; 0x9fc <main+0x94>
				}else if(key==4){
     ae2:	04 97       	sbiw	r24, 0x04	; 4
     ae4:	09 f0       	breq	.+2      	; 0xae8 <main+0x180>
     ae6:	8a cf       	rjmp	.-236    	; 0x9fc <main+0x94>
					prepareMeal(80);
     ae8:	80 e5       	ldi	r24, 0x50	; 80
     aea:	90 e0       	ldi	r25, 0x00	; 0
     aec:	0e 94 b6 03 	call	0x76c	; 0x76c <prepareMeal>
     af0:	85 cf       	rjmp	.-246    	; 0x9fc <main+0x94>
				}else{
					goto start;
				}
			}else{
				LCD_Clear();
     af2:	0e 94 e9 00 	call	0x1d2	; 0x1d2 <LCD_Clear>
				LCD_String("Unregistered");
     af6:	8e e4       	ldi	r24, 0x4E	; 78
     af8:	91 e0       	ldi	r25, 0x01	; 1
     afa:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
				LCD_Command(0xC0);
     afe:	80 ec       	ldi	r24, 0xC0	; 192
     b00:	0e 94 49 00 	call	0x92	; 0x92 <LCD_Command>
				LCD_String("User");
     b04:	8b e5       	ldi	r24, 0x5B	; 91
     b06:	91 e0       	ldi	r25, 0x01	; 1
     b08:	0e 94 d3 00 	call	0x1a6	; 0x1a6 <LCD_String>
     b0c:	2f ef       	ldi	r18, 0xFF	; 255
     b0e:	8d e3       	ldi	r24, 0x3D	; 61
     b10:	99 e4       	ldi	r25, 0x49	; 73
     b12:	21 50       	subi	r18, 0x01	; 1
     b14:	80 40       	sbci	r24, 0x00	; 0
     b16:	90 40       	sbci	r25, 0x00	; 0
     b18:	e1 f7       	brne	.-8      	; 0xb12 <main+0x1aa>
     b1a:	00 c0       	rjmp	.+0      	; 0xb1c <main+0x1b4>
     b1c:	00 00       	nop
     b1e:	6e cf       	rjmp	.-292    	; 0x9fc <main+0x94>

00000b20 <__subsf3>:
     b20:	50 58       	subi	r21, 0x80	; 128

00000b22 <__addsf3>:
     b22:	bb 27       	eor	r27, r27
     b24:	aa 27       	eor	r26, r26
     b26:	0e 94 a8 05 	call	0xb50	; 0xb50 <__addsf3x>
     b2a:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__fp_round>
     b2e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_pscA>
     b32:	38 f0       	brcs	.+14     	; 0xb42 <__addsf3+0x20>
     b34:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_pscB>
     b38:	20 f0       	brcs	.+8      	; 0xb42 <__addsf3+0x20>
     b3a:	39 f4       	brne	.+14     	; 0xb4a <__addsf3+0x28>
     b3c:	9f 3f       	cpi	r25, 0xFF	; 255
     b3e:	19 f4       	brne	.+6      	; 0xb46 <__addsf3+0x24>
     b40:	26 f4       	brtc	.+8      	; 0xb4a <__addsf3+0x28>
     b42:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_nan>
     b46:	0e f4       	brtc	.+2      	; 0xb4a <__addsf3+0x28>
     b48:	e0 95       	com	r30
     b4a:	e7 fb       	bst	r30, 7
     b4c:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_inf>

00000b50 <__addsf3x>:
     b50:	e9 2f       	mov	r30, r25
     b52:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fp_split3>
     b56:	58 f3       	brcs	.-42     	; 0xb2e <__addsf3+0xc>
     b58:	ba 17       	cp	r27, r26
     b5a:	62 07       	cpc	r22, r18
     b5c:	73 07       	cpc	r23, r19
     b5e:	84 07       	cpc	r24, r20
     b60:	95 07       	cpc	r25, r21
     b62:	20 f0       	brcs	.+8      	; 0xb6c <__addsf3x+0x1c>
     b64:	79 f4       	brne	.+30     	; 0xb84 <__addsf3x+0x34>
     b66:	a6 f5       	brtc	.+104    	; 0xbd0 <__addsf3x+0x80>
     b68:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_zero>
     b6c:	0e f4       	brtc	.+2      	; 0xb70 <__addsf3x+0x20>
     b6e:	e0 95       	com	r30
     b70:	0b 2e       	mov	r0, r27
     b72:	ba 2f       	mov	r27, r26
     b74:	a0 2d       	mov	r26, r0
     b76:	0b 01       	movw	r0, r22
     b78:	b9 01       	movw	r22, r18
     b7a:	90 01       	movw	r18, r0
     b7c:	0c 01       	movw	r0, r24
     b7e:	ca 01       	movw	r24, r20
     b80:	a0 01       	movw	r20, r0
     b82:	11 24       	eor	r1, r1
     b84:	ff 27       	eor	r31, r31
     b86:	59 1b       	sub	r21, r25
     b88:	99 f0       	breq	.+38     	; 0xbb0 <__addsf3x+0x60>
     b8a:	59 3f       	cpi	r21, 0xF9	; 249
     b8c:	50 f4       	brcc	.+20     	; 0xba2 <__addsf3x+0x52>
     b8e:	50 3e       	cpi	r21, 0xE0	; 224
     b90:	68 f1       	brcs	.+90     	; 0xbec <__addsf3x+0x9c>
     b92:	1a 16       	cp	r1, r26
     b94:	f0 40       	sbci	r31, 0x00	; 0
     b96:	a2 2f       	mov	r26, r18
     b98:	23 2f       	mov	r18, r19
     b9a:	34 2f       	mov	r19, r20
     b9c:	44 27       	eor	r20, r20
     b9e:	58 5f       	subi	r21, 0xF8	; 248
     ba0:	f3 cf       	rjmp	.-26     	; 0xb88 <__addsf3x+0x38>
     ba2:	46 95       	lsr	r20
     ba4:	37 95       	ror	r19
     ba6:	27 95       	ror	r18
     ba8:	a7 95       	ror	r26
     baa:	f0 40       	sbci	r31, 0x00	; 0
     bac:	53 95       	inc	r21
     bae:	c9 f7       	brne	.-14     	; 0xba2 <__addsf3x+0x52>
     bb0:	7e f4       	brtc	.+30     	; 0xbd0 <__addsf3x+0x80>
     bb2:	1f 16       	cp	r1, r31
     bb4:	ba 0b       	sbc	r27, r26
     bb6:	62 0b       	sbc	r22, r18
     bb8:	73 0b       	sbc	r23, r19
     bba:	84 0b       	sbc	r24, r20
     bbc:	ba f0       	brmi	.+46     	; 0xbec <__addsf3x+0x9c>
     bbe:	91 50       	subi	r25, 0x01	; 1
     bc0:	a1 f0       	breq	.+40     	; 0xbea <__addsf3x+0x9a>
     bc2:	ff 0f       	add	r31, r31
     bc4:	bb 1f       	adc	r27, r27
     bc6:	66 1f       	adc	r22, r22
     bc8:	77 1f       	adc	r23, r23
     bca:	88 1f       	adc	r24, r24
     bcc:	c2 f7       	brpl	.-16     	; 0xbbe <__addsf3x+0x6e>
     bce:	0e c0       	rjmp	.+28     	; 0xbec <__addsf3x+0x9c>
     bd0:	ba 0f       	add	r27, r26
     bd2:	62 1f       	adc	r22, r18
     bd4:	73 1f       	adc	r23, r19
     bd6:	84 1f       	adc	r24, r20
     bd8:	48 f4       	brcc	.+18     	; 0xbec <__addsf3x+0x9c>
     bda:	87 95       	ror	r24
     bdc:	77 95       	ror	r23
     bde:	67 95       	ror	r22
     be0:	b7 95       	ror	r27
     be2:	f7 95       	ror	r31
     be4:	9e 3f       	cpi	r25, 0xFE	; 254
     be6:	08 f0       	brcs	.+2      	; 0xbea <__addsf3x+0x9a>
     be8:	b0 cf       	rjmp	.-160    	; 0xb4a <__addsf3+0x28>
     bea:	93 95       	inc	r25
     bec:	88 0f       	add	r24, r24
     bee:	08 f0       	brcs	.+2      	; 0xbf2 <__addsf3x+0xa2>
     bf0:	99 27       	eor	r25, r25
     bf2:	ee 0f       	add	r30, r30
     bf4:	97 95       	ror	r25
     bf6:	87 95       	ror	r24
     bf8:	08 95       	ret

00000bfa <__divsf3>:
     bfa:	0e 94 11 06 	call	0xc22	; 0xc22 <__divsf3x>
     bfe:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__fp_round>
     c02:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_pscB>
     c06:	58 f0       	brcs	.+22     	; 0xc1e <__divsf3+0x24>
     c08:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_pscA>
     c0c:	40 f0       	brcs	.+16     	; 0xc1e <__divsf3+0x24>
     c0e:	29 f4       	brne	.+10     	; 0xc1a <__divsf3+0x20>
     c10:	5f 3f       	cpi	r21, 0xFF	; 255
     c12:	29 f0       	breq	.+10     	; 0xc1e <__divsf3+0x24>
     c14:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_inf>
     c18:	51 11       	cpse	r21, r1
     c1a:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_szero>
     c1e:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_nan>

00000c22 <__divsf3x>:
     c22:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fp_split3>
     c26:	68 f3       	brcs	.-38     	; 0xc02 <__divsf3+0x8>

00000c28 <__divsf3_pse>:
     c28:	99 23       	and	r25, r25
     c2a:	b1 f3       	breq	.-20     	; 0xc18 <__divsf3+0x1e>
     c2c:	55 23       	and	r21, r21
     c2e:	91 f3       	breq	.-28     	; 0xc14 <__divsf3+0x1a>
     c30:	95 1b       	sub	r25, r21
     c32:	55 0b       	sbc	r21, r21
     c34:	bb 27       	eor	r27, r27
     c36:	aa 27       	eor	r26, r26
     c38:	62 17       	cp	r22, r18
     c3a:	73 07       	cpc	r23, r19
     c3c:	84 07       	cpc	r24, r20
     c3e:	38 f0       	brcs	.+14     	; 0xc4e <__divsf3_pse+0x26>
     c40:	9f 5f       	subi	r25, 0xFF	; 255
     c42:	5f 4f       	sbci	r21, 0xFF	; 255
     c44:	22 0f       	add	r18, r18
     c46:	33 1f       	adc	r19, r19
     c48:	44 1f       	adc	r20, r20
     c4a:	aa 1f       	adc	r26, r26
     c4c:	a9 f3       	breq	.-22     	; 0xc38 <__divsf3_pse+0x10>
     c4e:	35 d0       	rcall	.+106    	; 0xcba <__divsf3_pse+0x92>
     c50:	0e 2e       	mov	r0, r30
     c52:	3a f0       	brmi	.+14     	; 0xc62 <__divsf3_pse+0x3a>
     c54:	e0 e8       	ldi	r30, 0x80	; 128
     c56:	32 d0       	rcall	.+100    	; 0xcbc <__divsf3_pse+0x94>
     c58:	91 50       	subi	r25, 0x01	; 1
     c5a:	50 40       	sbci	r21, 0x00	; 0
     c5c:	e6 95       	lsr	r30
     c5e:	00 1c       	adc	r0, r0
     c60:	ca f7       	brpl	.-14     	; 0xc54 <__divsf3_pse+0x2c>
     c62:	2b d0       	rcall	.+86     	; 0xcba <__divsf3_pse+0x92>
     c64:	fe 2f       	mov	r31, r30
     c66:	29 d0       	rcall	.+82     	; 0xcba <__divsf3_pse+0x92>
     c68:	66 0f       	add	r22, r22
     c6a:	77 1f       	adc	r23, r23
     c6c:	88 1f       	adc	r24, r24
     c6e:	bb 1f       	adc	r27, r27
     c70:	26 17       	cp	r18, r22
     c72:	37 07       	cpc	r19, r23
     c74:	48 07       	cpc	r20, r24
     c76:	ab 07       	cpc	r26, r27
     c78:	b0 e8       	ldi	r27, 0x80	; 128
     c7a:	09 f0       	breq	.+2      	; 0xc7e <__divsf3_pse+0x56>
     c7c:	bb 0b       	sbc	r27, r27
     c7e:	80 2d       	mov	r24, r0
     c80:	bf 01       	movw	r22, r30
     c82:	ff 27       	eor	r31, r31
     c84:	93 58       	subi	r25, 0x83	; 131
     c86:	5f 4f       	sbci	r21, 0xFF	; 255
     c88:	3a f0       	brmi	.+14     	; 0xc98 <__divsf3_pse+0x70>
     c8a:	9e 3f       	cpi	r25, 0xFE	; 254
     c8c:	51 05       	cpc	r21, r1
     c8e:	78 f0       	brcs	.+30     	; 0xcae <__divsf3_pse+0x86>
     c90:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_inf>
     c94:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_szero>
     c98:	5f 3f       	cpi	r21, 0xFF	; 255
     c9a:	e4 f3       	brlt	.-8      	; 0xc94 <__divsf3_pse+0x6c>
     c9c:	98 3e       	cpi	r25, 0xE8	; 232
     c9e:	d4 f3       	brlt	.-12     	; 0xc94 <__divsf3_pse+0x6c>
     ca0:	86 95       	lsr	r24
     ca2:	77 95       	ror	r23
     ca4:	67 95       	ror	r22
     ca6:	b7 95       	ror	r27
     ca8:	f7 95       	ror	r31
     caa:	9f 5f       	subi	r25, 0xFF	; 255
     cac:	c9 f7       	brne	.-14     	; 0xca0 <__divsf3_pse+0x78>
     cae:	88 0f       	add	r24, r24
     cb0:	91 1d       	adc	r25, r1
     cb2:	96 95       	lsr	r25
     cb4:	87 95       	ror	r24
     cb6:	97 f9       	bld	r25, 7
     cb8:	08 95       	ret
     cba:	e1 e0       	ldi	r30, 0x01	; 1
     cbc:	66 0f       	add	r22, r22
     cbe:	77 1f       	adc	r23, r23
     cc0:	88 1f       	adc	r24, r24
     cc2:	bb 1f       	adc	r27, r27
     cc4:	62 17       	cp	r22, r18
     cc6:	73 07       	cpc	r23, r19
     cc8:	84 07       	cpc	r24, r20
     cca:	ba 07       	cpc	r27, r26
     ccc:	20 f0       	brcs	.+8      	; 0xcd6 <__divsf3_pse+0xae>
     cce:	62 1b       	sub	r22, r18
     cd0:	73 0b       	sbc	r23, r19
     cd2:	84 0b       	sbc	r24, r20
     cd4:	ba 0b       	sbc	r27, r26
     cd6:	ee 1f       	adc	r30, r30
     cd8:	88 f7       	brcc	.-30     	; 0xcbc <__divsf3_pse+0x94>
     cda:	e0 95       	com	r30
     cdc:	08 95       	ret

00000cde <__fixsfsi>:
     cde:	0e 94 76 06 	call	0xcec	; 0xcec <__fixunssfsi>
     ce2:	68 94       	set
     ce4:	b1 11       	cpse	r27, r1
     ce6:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_szero>
     cea:	08 95       	ret

00000cec <__fixunssfsi>:
     cec:	0e 94 12 07 	call	0xe24	; 0xe24 <__fp_splitA>
     cf0:	88 f0       	brcs	.+34     	; 0xd14 <__fixunssfsi+0x28>
     cf2:	9f 57       	subi	r25, 0x7F	; 127
     cf4:	98 f0       	brcs	.+38     	; 0xd1c <__fixunssfsi+0x30>
     cf6:	b9 2f       	mov	r27, r25
     cf8:	99 27       	eor	r25, r25
     cfa:	b7 51       	subi	r27, 0x17	; 23
     cfc:	b0 f0       	brcs	.+44     	; 0xd2a <__fixunssfsi+0x3e>
     cfe:	e1 f0       	breq	.+56     	; 0xd38 <__fixunssfsi+0x4c>
     d00:	66 0f       	add	r22, r22
     d02:	77 1f       	adc	r23, r23
     d04:	88 1f       	adc	r24, r24
     d06:	99 1f       	adc	r25, r25
     d08:	1a f0       	brmi	.+6      	; 0xd10 <__fixunssfsi+0x24>
     d0a:	ba 95       	dec	r27
     d0c:	c9 f7       	brne	.-14     	; 0xd00 <__fixunssfsi+0x14>
     d0e:	14 c0       	rjmp	.+40     	; 0xd38 <__fixunssfsi+0x4c>
     d10:	b1 30       	cpi	r27, 0x01	; 1
     d12:	91 f0       	breq	.+36     	; 0xd38 <__fixunssfsi+0x4c>
     d14:	0e 94 2c 07 	call	0xe58	; 0xe58 <__fp_zero>
     d18:	b1 e0       	ldi	r27, 0x01	; 1
     d1a:	08 95       	ret
     d1c:	0c 94 2c 07 	jmp	0xe58	; 0xe58 <__fp_zero>
     d20:	67 2f       	mov	r22, r23
     d22:	78 2f       	mov	r23, r24
     d24:	88 27       	eor	r24, r24
     d26:	b8 5f       	subi	r27, 0xF8	; 248
     d28:	39 f0       	breq	.+14     	; 0xd38 <__fixunssfsi+0x4c>
     d2a:	b9 3f       	cpi	r27, 0xF9	; 249
     d2c:	cc f3       	brlt	.-14     	; 0xd20 <__fixunssfsi+0x34>
     d2e:	86 95       	lsr	r24
     d30:	77 95       	ror	r23
     d32:	67 95       	ror	r22
     d34:	b3 95       	inc	r27
     d36:	d9 f7       	brne	.-10     	; 0xd2e <__fixunssfsi+0x42>
     d38:	3e f4       	brtc	.+14     	; 0xd48 <__fixunssfsi+0x5c>
     d3a:	90 95       	com	r25
     d3c:	80 95       	com	r24
     d3e:	70 95       	com	r23
     d40:	61 95       	neg	r22
     d42:	7f 4f       	sbci	r23, 0xFF	; 255
     d44:	8f 4f       	sbci	r24, 0xFF	; 255
     d46:	9f 4f       	sbci	r25, 0xFF	; 255
     d48:	08 95       	ret

00000d4a <__floatunsisf>:
     d4a:	e8 94       	clt
     d4c:	09 c0       	rjmp	.+18     	; 0xd60 <__floatsisf+0x12>

00000d4e <__floatsisf>:
     d4e:	97 fb       	bst	r25, 7
     d50:	3e f4       	brtc	.+14     	; 0xd60 <__floatsisf+0x12>
     d52:	90 95       	com	r25
     d54:	80 95       	com	r24
     d56:	70 95       	com	r23
     d58:	61 95       	neg	r22
     d5a:	7f 4f       	sbci	r23, 0xFF	; 255
     d5c:	8f 4f       	sbci	r24, 0xFF	; 255
     d5e:	9f 4f       	sbci	r25, 0xFF	; 255
     d60:	99 23       	and	r25, r25
     d62:	a9 f0       	breq	.+42     	; 0xd8e <__floatsisf+0x40>
     d64:	f9 2f       	mov	r31, r25
     d66:	96 e9       	ldi	r25, 0x96	; 150
     d68:	bb 27       	eor	r27, r27
     d6a:	93 95       	inc	r25
     d6c:	f6 95       	lsr	r31
     d6e:	87 95       	ror	r24
     d70:	77 95       	ror	r23
     d72:	67 95       	ror	r22
     d74:	b7 95       	ror	r27
     d76:	f1 11       	cpse	r31, r1
     d78:	f8 cf       	rjmp	.-16     	; 0xd6a <__floatsisf+0x1c>
     d7a:	fa f4       	brpl	.+62     	; 0xdba <__floatsisf+0x6c>
     d7c:	bb 0f       	add	r27, r27
     d7e:	11 f4       	brne	.+4      	; 0xd84 <__floatsisf+0x36>
     d80:	60 ff       	sbrs	r22, 0
     d82:	1b c0       	rjmp	.+54     	; 0xdba <__floatsisf+0x6c>
     d84:	6f 5f       	subi	r22, 0xFF	; 255
     d86:	7f 4f       	sbci	r23, 0xFF	; 255
     d88:	8f 4f       	sbci	r24, 0xFF	; 255
     d8a:	9f 4f       	sbci	r25, 0xFF	; 255
     d8c:	16 c0       	rjmp	.+44     	; 0xdba <__floatsisf+0x6c>
     d8e:	88 23       	and	r24, r24
     d90:	11 f0       	breq	.+4      	; 0xd96 <__floatsisf+0x48>
     d92:	96 e9       	ldi	r25, 0x96	; 150
     d94:	11 c0       	rjmp	.+34     	; 0xdb8 <__floatsisf+0x6a>
     d96:	77 23       	and	r23, r23
     d98:	21 f0       	breq	.+8      	; 0xda2 <__floatsisf+0x54>
     d9a:	9e e8       	ldi	r25, 0x8E	; 142
     d9c:	87 2f       	mov	r24, r23
     d9e:	76 2f       	mov	r23, r22
     da0:	05 c0       	rjmp	.+10     	; 0xdac <__floatsisf+0x5e>
     da2:	66 23       	and	r22, r22
     da4:	71 f0       	breq	.+28     	; 0xdc2 <__floatsisf+0x74>
     da6:	96 e8       	ldi	r25, 0x86	; 134
     da8:	86 2f       	mov	r24, r22
     daa:	70 e0       	ldi	r23, 0x00	; 0
     dac:	60 e0       	ldi	r22, 0x00	; 0
     dae:	2a f0       	brmi	.+10     	; 0xdba <__floatsisf+0x6c>
     db0:	9a 95       	dec	r25
     db2:	66 0f       	add	r22, r22
     db4:	77 1f       	adc	r23, r23
     db6:	88 1f       	adc	r24, r24
     db8:	da f7       	brpl	.-10     	; 0xdb0 <__floatsisf+0x62>
     dba:	88 0f       	add	r24, r24
     dbc:	96 95       	lsr	r25
     dbe:	87 95       	ror	r24
     dc0:	97 f9       	bld	r25, 7
     dc2:	08 95       	ret

00000dc4 <__fp_inf>:
     dc4:	97 f9       	bld	r25, 7
     dc6:	9f 67       	ori	r25, 0x7F	; 127
     dc8:	80 e8       	ldi	r24, 0x80	; 128
     dca:	70 e0       	ldi	r23, 0x00	; 0
     dcc:	60 e0       	ldi	r22, 0x00	; 0
     dce:	08 95       	ret

00000dd0 <__fp_nan>:
     dd0:	9f ef       	ldi	r25, 0xFF	; 255
     dd2:	80 ec       	ldi	r24, 0xC0	; 192
     dd4:	08 95       	ret

00000dd6 <__fp_pscA>:
     dd6:	00 24       	eor	r0, r0
     dd8:	0a 94       	dec	r0
     dda:	16 16       	cp	r1, r22
     ddc:	17 06       	cpc	r1, r23
     dde:	18 06       	cpc	r1, r24
     de0:	09 06       	cpc	r0, r25
     de2:	08 95       	ret

00000de4 <__fp_pscB>:
     de4:	00 24       	eor	r0, r0
     de6:	0a 94       	dec	r0
     de8:	12 16       	cp	r1, r18
     dea:	13 06       	cpc	r1, r19
     dec:	14 06       	cpc	r1, r20
     dee:	05 06       	cpc	r0, r21
     df0:	08 95       	ret

00000df2 <__fp_round>:
     df2:	09 2e       	mov	r0, r25
     df4:	03 94       	inc	r0
     df6:	00 0c       	add	r0, r0
     df8:	11 f4       	brne	.+4      	; 0xdfe <__fp_round+0xc>
     dfa:	88 23       	and	r24, r24
     dfc:	52 f0       	brmi	.+20     	; 0xe12 <__fp_round+0x20>
     dfe:	bb 0f       	add	r27, r27
     e00:	40 f4       	brcc	.+16     	; 0xe12 <__fp_round+0x20>
     e02:	bf 2b       	or	r27, r31
     e04:	11 f4       	brne	.+4      	; 0xe0a <__fp_round+0x18>
     e06:	60 ff       	sbrs	r22, 0
     e08:	04 c0       	rjmp	.+8      	; 0xe12 <__fp_round+0x20>
     e0a:	6f 5f       	subi	r22, 0xFF	; 255
     e0c:	7f 4f       	sbci	r23, 0xFF	; 255
     e0e:	8f 4f       	sbci	r24, 0xFF	; 255
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	08 95       	ret

00000e14 <__fp_split3>:
     e14:	57 fd       	sbrc	r21, 7
     e16:	90 58       	subi	r25, 0x80	; 128
     e18:	44 0f       	add	r20, r20
     e1a:	55 1f       	adc	r21, r21
     e1c:	59 f0       	breq	.+22     	; 0xe34 <__fp_splitA+0x10>
     e1e:	5f 3f       	cpi	r21, 0xFF	; 255
     e20:	71 f0       	breq	.+28     	; 0xe3e <__fp_splitA+0x1a>
     e22:	47 95       	ror	r20

00000e24 <__fp_splitA>:
     e24:	88 0f       	add	r24, r24
     e26:	97 fb       	bst	r25, 7
     e28:	99 1f       	adc	r25, r25
     e2a:	61 f0       	breq	.+24     	; 0xe44 <__fp_splitA+0x20>
     e2c:	9f 3f       	cpi	r25, 0xFF	; 255
     e2e:	79 f0       	breq	.+30     	; 0xe4e <__fp_splitA+0x2a>
     e30:	87 95       	ror	r24
     e32:	08 95       	ret
     e34:	12 16       	cp	r1, r18
     e36:	13 06       	cpc	r1, r19
     e38:	14 06       	cpc	r1, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	f2 cf       	rjmp	.-28     	; 0xe22 <__fp_split3+0xe>
     e3e:	46 95       	lsr	r20
     e40:	f1 df       	rcall	.-30     	; 0xe24 <__fp_splitA>
     e42:	08 c0       	rjmp	.+16     	; 0xe54 <__fp_splitA+0x30>
     e44:	16 16       	cp	r1, r22
     e46:	17 06       	cpc	r1, r23
     e48:	18 06       	cpc	r1, r24
     e4a:	99 1f       	adc	r25, r25
     e4c:	f1 cf       	rjmp	.-30     	; 0xe30 <__fp_splitA+0xc>
     e4e:	86 95       	lsr	r24
     e50:	71 05       	cpc	r23, r1
     e52:	61 05       	cpc	r22, r1
     e54:	08 94       	sec
     e56:	08 95       	ret

00000e58 <__fp_zero>:
     e58:	e8 94       	clt

00000e5a <__fp_szero>:
     e5a:	bb 27       	eor	r27, r27
     e5c:	66 27       	eor	r22, r22
     e5e:	77 27       	eor	r23, r23
     e60:	cb 01       	movw	r24, r22
     e62:	97 f9       	bld	r25, 7
     e64:	08 95       	ret

00000e66 <__mulsf3>:
     e66:	0e 94 46 07 	call	0xe8c	; 0xe8c <__mulsf3x>
     e6a:	0c 94 f9 06 	jmp	0xdf2	; 0xdf2 <__fp_round>
     e6e:	0e 94 eb 06 	call	0xdd6	; 0xdd6 <__fp_pscA>
     e72:	38 f0       	brcs	.+14     	; 0xe82 <__mulsf3+0x1c>
     e74:	0e 94 f2 06 	call	0xde4	; 0xde4 <__fp_pscB>
     e78:	20 f0       	brcs	.+8      	; 0xe82 <__mulsf3+0x1c>
     e7a:	95 23       	and	r25, r21
     e7c:	11 f0       	breq	.+4      	; 0xe82 <__mulsf3+0x1c>
     e7e:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_inf>
     e82:	0c 94 e8 06 	jmp	0xdd0	; 0xdd0 <__fp_nan>
     e86:	11 24       	eor	r1, r1
     e88:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_szero>

00000e8c <__mulsf3x>:
     e8c:	0e 94 0a 07 	call	0xe14	; 0xe14 <__fp_split3>
     e90:	70 f3       	brcs	.-36     	; 0xe6e <__mulsf3+0x8>

00000e92 <__mulsf3_pse>:
     e92:	95 9f       	mul	r25, r21
     e94:	c1 f3       	breq	.-16     	; 0xe86 <__mulsf3+0x20>
     e96:	95 0f       	add	r25, r21
     e98:	50 e0       	ldi	r21, 0x00	; 0
     e9a:	55 1f       	adc	r21, r21
     e9c:	62 9f       	mul	r22, r18
     e9e:	f0 01       	movw	r30, r0
     ea0:	72 9f       	mul	r23, r18
     ea2:	bb 27       	eor	r27, r27
     ea4:	f0 0d       	add	r31, r0
     ea6:	b1 1d       	adc	r27, r1
     ea8:	63 9f       	mul	r22, r19
     eaa:	aa 27       	eor	r26, r26
     eac:	f0 0d       	add	r31, r0
     eae:	b1 1d       	adc	r27, r1
     eb0:	aa 1f       	adc	r26, r26
     eb2:	64 9f       	mul	r22, r20
     eb4:	66 27       	eor	r22, r22
     eb6:	b0 0d       	add	r27, r0
     eb8:	a1 1d       	adc	r26, r1
     eba:	66 1f       	adc	r22, r22
     ebc:	82 9f       	mul	r24, r18
     ebe:	22 27       	eor	r18, r18
     ec0:	b0 0d       	add	r27, r0
     ec2:	a1 1d       	adc	r26, r1
     ec4:	62 1f       	adc	r22, r18
     ec6:	73 9f       	mul	r23, r19
     ec8:	b0 0d       	add	r27, r0
     eca:	a1 1d       	adc	r26, r1
     ecc:	62 1f       	adc	r22, r18
     ece:	83 9f       	mul	r24, r19
     ed0:	a0 0d       	add	r26, r0
     ed2:	61 1d       	adc	r22, r1
     ed4:	22 1f       	adc	r18, r18
     ed6:	74 9f       	mul	r23, r20
     ed8:	33 27       	eor	r19, r19
     eda:	a0 0d       	add	r26, r0
     edc:	61 1d       	adc	r22, r1
     ede:	23 1f       	adc	r18, r19
     ee0:	84 9f       	mul	r24, r20
     ee2:	60 0d       	add	r22, r0
     ee4:	21 1d       	adc	r18, r1
     ee6:	82 2f       	mov	r24, r18
     ee8:	76 2f       	mov	r23, r22
     eea:	6a 2f       	mov	r22, r26
     eec:	11 24       	eor	r1, r1
     eee:	9f 57       	subi	r25, 0x7F	; 127
     ef0:	50 40       	sbci	r21, 0x00	; 0
     ef2:	9a f0       	brmi	.+38     	; 0xf1a <__mulsf3_pse+0x88>
     ef4:	f1 f0       	breq	.+60     	; 0xf32 <__mulsf3_pse+0xa0>
     ef6:	88 23       	and	r24, r24
     ef8:	4a f0       	brmi	.+18     	; 0xf0c <__mulsf3_pse+0x7a>
     efa:	ee 0f       	add	r30, r30
     efc:	ff 1f       	adc	r31, r31
     efe:	bb 1f       	adc	r27, r27
     f00:	66 1f       	adc	r22, r22
     f02:	77 1f       	adc	r23, r23
     f04:	88 1f       	adc	r24, r24
     f06:	91 50       	subi	r25, 0x01	; 1
     f08:	50 40       	sbci	r21, 0x00	; 0
     f0a:	a9 f7       	brne	.-22     	; 0xef6 <__mulsf3_pse+0x64>
     f0c:	9e 3f       	cpi	r25, 0xFE	; 254
     f0e:	51 05       	cpc	r21, r1
     f10:	80 f0       	brcs	.+32     	; 0xf32 <__mulsf3_pse+0xa0>
     f12:	0c 94 e2 06 	jmp	0xdc4	; 0xdc4 <__fp_inf>
     f16:	0c 94 2d 07 	jmp	0xe5a	; 0xe5a <__fp_szero>
     f1a:	5f 3f       	cpi	r21, 0xFF	; 255
     f1c:	e4 f3       	brlt	.-8      	; 0xf16 <__mulsf3_pse+0x84>
     f1e:	98 3e       	cpi	r25, 0xE8	; 232
     f20:	d4 f3       	brlt	.-12     	; 0xf16 <__mulsf3_pse+0x84>
     f22:	86 95       	lsr	r24
     f24:	77 95       	ror	r23
     f26:	67 95       	ror	r22
     f28:	b7 95       	ror	r27
     f2a:	f7 95       	ror	r31
     f2c:	e7 95       	ror	r30
     f2e:	9f 5f       	subi	r25, 0xFF	; 255
     f30:	c1 f7       	brne	.-16     	; 0xf22 <__mulsf3_pse+0x90>
     f32:	fe 2b       	or	r31, r30
     f34:	88 0f       	add	r24, r24
     f36:	91 1d       	adc	r25, r1
     f38:	96 95       	lsr	r25
     f3a:	87 95       	ror	r24
     f3c:	97 f9       	bld	r25, 7
     f3e:	08 95       	ret

00000f40 <__udivmodsi4>:
     f40:	a1 e2       	ldi	r26, 0x21	; 33
     f42:	1a 2e       	mov	r1, r26
     f44:	aa 1b       	sub	r26, r26
     f46:	bb 1b       	sub	r27, r27
     f48:	fd 01       	movw	r30, r26
     f4a:	0d c0       	rjmp	.+26     	; 0xf66 <__udivmodsi4_ep>

00000f4c <__udivmodsi4_loop>:
     f4c:	aa 1f       	adc	r26, r26
     f4e:	bb 1f       	adc	r27, r27
     f50:	ee 1f       	adc	r30, r30
     f52:	ff 1f       	adc	r31, r31
     f54:	a2 17       	cp	r26, r18
     f56:	b3 07       	cpc	r27, r19
     f58:	e4 07       	cpc	r30, r20
     f5a:	f5 07       	cpc	r31, r21
     f5c:	20 f0       	brcs	.+8      	; 0xf66 <__udivmodsi4_ep>
     f5e:	a2 1b       	sub	r26, r18
     f60:	b3 0b       	sbc	r27, r19
     f62:	e4 0b       	sbc	r30, r20
     f64:	f5 0b       	sbc	r31, r21

00000f66 <__udivmodsi4_ep>:
     f66:	66 1f       	adc	r22, r22
     f68:	77 1f       	adc	r23, r23
     f6a:	88 1f       	adc	r24, r24
     f6c:	99 1f       	adc	r25, r25
     f6e:	1a 94       	dec	r1
     f70:	69 f7       	brne	.-38     	; 0xf4c <__udivmodsi4_loop>
     f72:	60 95       	com	r22
     f74:	70 95       	com	r23
     f76:	80 95       	com	r24
     f78:	90 95       	com	r25
     f7a:	9b 01       	movw	r18, r22
     f7c:	ac 01       	movw	r20, r24
     f7e:	bd 01       	movw	r22, r26
     f80:	cf 01       	movw	r24, r30
     f82:	08 95       	ret

00000f84 <strcmp>:
     f84:	fb 01       	movw	r30, r22
     f86:	dc 01       	movw	r26, r24
     f88:	8d 91       	ld	r24, X+
     f8a:	01 90       	ld	r0, Z+
     f8c:	80 19       	sub	r24, r0
     f8e:	01 10       	cpse	r0, r1
     f90:	d9 f3       	breq	.-10     	; 0xf88 <strcmp+0x4>
     f92:	99 0b       	sbc	r25, r25
     f94:	08 95       	ret

00000f96 <__itoa_ncheck>:
     f96:	bb 27       	eor	r27, r27
     f98:	4a 30       	cpi	r20, 0x0A	; 10
     f9a:	31 f4       	brne	.+12     	; 0xfa8 <__itoa_ncheck+0x12>
     f9c:	99 23       	and	r25, r25
     f9e:	22 f4       	brpl	.+8      	; 0xfa8 <__itoa_ncheck+0x12>
     fa0:	bd e2       	ldi	r27, 0x2D	; 45
     fa2:	90 95       	com	r25
     fa4:	81 95       	neg	r24
     fa6:	9f 4f       	sbci	r25, 0xFF	; 255
     fa8:	0c 94 d7 07 	jmp	0xfae	; 0xfae <__utoa_common>

00000fac <__utoa_ncheck>:
     fac:	bb 27       	eor	r27, r27

00000fae <__utoa_common>:
     fae:	fb 01       	movw	r30, r22
     fb0:	55 27       	eor	r21, r21
     fb2:	aa 27       	eor	r26, r26
     fb4:	88 0f       	add	r24, r24
     fb6:	99 1f       	adc	r25, r25
     fb8:	aa 1f       	adc	r26, r26
     fba:	a4 17       	cp	r26, r20
     fbc:	10 f0       	brcs	.+4      	; 0xfc2 <__utoa_common+0x14>
     fbe:	a4 1b       	sub	r26, r20
     fc0:	83 95       	inc	r24
     fc2:	50 51       	subi	r21, 0x10	; 16
     fc4:	b9 f7       	brne	.-18     	; 0xfb4 <__utoa_common+0x6>
     fc6:	a0 5d       	subi	r26, 0xD0	; 208
     fc8:	aa 33       	cpi	r26, 0x3A	; 58
     fca:	08 f0       	brcs	.+2      	; 0xfce <__utoa_common+0x20>
     fcc:	a9 5d       	subi	r26, 0xD9	; 217
     fce:	a1 93       	st	Z+, r26
     fd0:	00 97       	sbiw	r24, 0x00	; 0
     fd2:	79 f7       	brne	.-34     	; 0xfb2 <__utoa_common+0x4>
     fd4:	b1 11       	cpse	r27, r1
     fd6:	b1 93       	st	Z+, r27
     fd8:	11 92       	st	Z+, r1
     fda:	cb 01       	movw	r24, r22
     fdc:	0c 94 f0 07 	jmp	0xfe0	; 0xfe0 <strrev>

00000fe0 <strrev>:
     fe0:	dc 01       	movw	r26, r24
     fe2:	fc 01       	movw	r30, r24
     fe4:	67 2f       	mov	r22, r23
     fe6:	71 91       	ld	r23, Z+
     fe8:	77 23       	and	r23, r23
     fea:	e1 f7       	brne	.-8      	; 0xfe4 <strrev+0x4>
     fec:	32 97       	sbiw	r30, 0x02	; 2
     fee:	04 c0       	rjmp	.+8      	; 0xff8 <strrev+0x18>
     ff0:	7c 91       	ld	r23, X
     ff2:	6d 93       	st	X+, r22
     ff4:	70 83       	st	Z, r23
     ff6:	62 91       	ld	r22, -Z
     ff8:	ae 17       	cp	r26, r30
     ffa:	bf 07       	cpc	r27, r31
     ffc:	c8 f3       	brcs	.-14     	; 0xff0 <strrev+0x10>
     ffe:	08 95       	ret

00001000 <_exit>:
    1000:	f8 94       	cli

00001002 <__stop_program>:
    1002:	ff cf       	rjmp	.-2      	; 0x1002 <__stop_program>
